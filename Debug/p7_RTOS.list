
p7_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005010  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005120  08005120  00006120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  00007064  2**0
                  CONTENTS
  4 .ARM          00000000  0800524c  0800524c  00007064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800524c  0800524c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005250  08005250  00006250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005254  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba0  20000064  080052b8  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c04  080052b8  00007c04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b12  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0a  00000000  00000000  00019b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cef  00000000  00000000  0001d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000279f  00000000  00000000  0001e55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012572  00000000  00000000  00020cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009151f  00000000  00000000  00033270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c478f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004884  00000000  00000000  000c47d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c9058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005108 	.word	0x08005108

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005108 	.word	0x08005108

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 8000154:	4b21      	ldr	r3, [pc, #132]	@ (80001dc <main+0x8c>)
 8000156:	2201      	movs	r2, #1
 8000158:	701a      	strb	r2, [r3, #0]
	GreenFlag = 1;
 800015a:	4b21      	ldr	r3, [pc, #132]	@ (80001e0 <main+0x90>)
 800015c:	2201      	movs	r2, #1
 800015e:	701a      	strb	r2, [r3, #0]
	RedFlag = 1;
 8000160:	4b20      	ldr	r3, [pc, #128]	@ (80001e4 <main+0x94>)
 8000162:	2201      	movs	r2, #1
 8000164:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fad9 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f85b 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f895 	bl	800029c <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000178:	481b      	ldr	r0, [pc, #108]	@ (80001e8 <main+0x98>)
 800017a:	f000 fd65 	bl	8000c48 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800017e:	f001 fc0b 	bl	8001998 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 8000182:	4a1a      	ldr	r2, [pc, #104]	@ (80001ec <main+0x9c>)
 8000184:	2101      	movs	r1, #1
 8000186:	2001      	movs	r0, #1
 8000188:	f001 fd44 	bl	8001c14 <osSemaphoreNew>
 800018c:	4603      	mov	r3, r0
 800018e:	4a18      	ldr	r2, [pc, #96]	@ (80001f0 <main+0xa0>)
 8000190:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000192:	4a18      	ldr	r2, [pc, #96]	@ (80001f4 <main+0xa4>)
 8000194:	2100      	movs	r1, #0
 8000196:	4818      	ldr	r0, [pc, #96]	@ (80001f8 <main+0xa8>)
 8000198:	f001 fc64 	bl	8001a64 <osThreadNew>
 800019c:	4603      	mov	r3, r0
 800019e:	4a17      	ldr	r2, [pc, #92]	@ (80001fc <main+0xac>)
 80001a0:	6013      	str	r3, [r2, #0]

  /* creation of redLed */
  redLedHandle = osThreadNew(RedLed, NULL, &redLed_attributes);
 80001a2:	4a17      	ldr	r2, [pc, #92]	@ (8000200 <main+0xb0>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	4817      	ldr	r0, [pc, #92]	@ (8000204 <main+0xb4>)
 80001a8:	f001 fc5c 	bl	8001a64 <osThreadNew>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a16      	ldr	r2, [pc, #88]	@ (8000208 <main+0xb8>)
 80001b0:	6013      	str	r3, [r2, #0]

  /* creation of greenLed */
  greenLedHandle = osThreadNew(GreenLed, NULL, &greenLed_attributes);
 80001b2:	4a16      	ldr	r2, [pc, #88]	@ (800020c <main+0xbc>)
 80001b4:	2100      	movs	r1, #0
 80001b6:	4816      	ldr	r0, [pc, #88]	@ (8000210 <main+0xc0>)
 80001b8:	f001 fc54 	bl	8001a64 <osThreadNew>
 80001bc:	4603      	mov	r3, r0
 80001be:	4a15      	ldr	r2, [pc, #84]	@ (8000214 <main+0xc4>)
 80001c0:	6013      	str	r3, [r2, #0]

  /* creation of orangeLed */
  orangeLedHandle = osThreadNew(OrangeLed, NULL, &orangeLed_attributes);
 80001c2:	4a15      	ldr	r2, [pc, #84]	@ (8000218 <main+0xc8>)
 80001c4:	2100      	movs	r1, #0
 80001c6:	4815      	ldr	r0, [pc, #84]	@ (800021c <main+0xcc>)
 80001c8:	f001 fc4c 	bl	8001a64 <osThreadNew>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a14      	ldr	r2, [pc, #80]	@ (8000220 <main+0xd0>)
 80001d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d2:	f001 fc13 	bl	80019fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d6:	bf00      	nop
 80001d8:	e7fd      	b.n	80001d6 <main+0x86>
 80001da:	bf00      	nop
 80001dc:	20000094 	.word	0x20000094
 80001e0:	20000096 	.word	0x20000096
 80001e4:	20000095 	.word	0x20000095
 80001e8:	40011000 	.word	0x40011000
 80001ec:	08005210 	.word	0x08005210
 80001f0:	20000090 	.word	0x20000090
 80001f4:	08005180 	.word	0x08005180
 80001f8:	0800035d 	.word	0x0800035d
 80001fc:	20000080 	.word	0x20000080
 8000200:	080051a4 	.word	0x080051a4
 8000204:	0800036d 	.word	0x0800036d
 8000208:	20000084 	.word	0x20000084
 800020c:	080051c8 	.word	0x080051c8
 8000210:	080003dd 	.word	0x080003dd
 8000214:	20000088 	.word	0x20000088
 8000218:	080051ec 	.word	0x080051ec
 800021c:	080004c1 	.word	0x080004c1
 8000220:	2000008c 	.word	0x2000008c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f004 fe82 	bl	8004f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fd26 	bl	8000cac <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f94d 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f000 ff94 	bl	80011b0 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f939 	bl	8000504 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b27      	ldr	r3, [pc, #156]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a26      	ldr	r2, [pc, #152]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b24      	ldr	r3, [pc, #144]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b21      	ldr	r3, [pc, #132]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a20      	ldr	r2, [pc, #128]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80002fe:	4815      	ldr	r0, [pc, #84]	@ (8000354 <MX_GPIO_Init+0xb8>)
 8000300:	f000 fca2 	bl	8000c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2101      	movs	r1, #1
 8000308:	4813      	ldr	r0, [pc, #76]	@ (8000358 <MX_GPIO_Init+0xbc>)
 800030a:	f000 fc9d 	bl	8000c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800030e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2302      	movs	r3, #2
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	480b      	ldr	r0, [pc, #44]	@ (8000354 <MX_GPIO_Init+0xb8>)
 8000328:	f000 fb0a 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800032c:	2301      	movs	r3, #1
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2302      	movs	r3, #2
 800033a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4619      	mov	r1, r3
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_GPIO_Init+0xbc>)
 8000344:	f000 fafc 	bl	8000940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000348:	bf00      	nop
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000
 8000358:	40010800 	.word	0x40010800

0800035c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f001 fc27 	bl	8001bb8 <osDelay>
 800036a:	e7fb      	b.n	8000364 <StartDefaultTask+0x8>

0800036c <RedLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLed */
void RedLed(void *argument)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLed */
  /* Infinite loop */
  for(;;)
  {
      RedFlag = 1;
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <RedLed+0x60>)
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
      // Turn on Red LED
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000380:	4813      	ldr	r0, [pc, #76]	@ (80003d0 <RedLed+0x64>)
 8000382:	f000 fc61 	bl	8000c48 <HAL_GPIO_WritePin>

      // Enter critical section
      osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <RedLed+0x68>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a13      	ldr	r2, [pc, #76]	@ (80003d8 <RedLed+0x6c>)
 800038c:	8812      	ldrh	r2, [r2, #0]
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fcdb 	bl	8001d4c <osSemaphoreAcquire>
      AccessSharedData();
 8000396:	f000 f857 	bl	8000448 <AccessSharedData>
      osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <RedLed+0x68>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fd3a 	bl	8001e18 <osSemaphoreRelease>

      // Turn off Red LED
      osDelay(550);
 80003a4:	f240 2026 	movw	r0, #550	@ 0x226
 80003a8:	f001 fc06 	bl	8001bb8 <osDelay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003b2:	4807      	ldr	r0, [pc, #28]	@ (80003d0 <RedLed+0x64>)
 80003b4:	f000 fc48 	bl	8000c48 <HAL_GPIO_WritePin>

      RedFlag = 0;
 80003b8:	4b04      	ldr	r3, [pc, #16]	@ (80003cc <RedLed+0x60>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
      // Delay for 100 milliseconds
      osDelay(550);
 80003be:	f240 2026 	movw	r0, #550	@ 0x226
 80003c2:	f001 fbf9 	bl	8001bb8 <osDelay>
  {
 80003c6:	bf00      	nop
 80003c8:	e7d4      	b.n	8000374 <RedLed+0x8>
 80003ca:	bf00      	nop
 80003cc:	20000095 	.word	0x20000095
 80003d0:	40011000 	.word	0x40011000
 80003d4:	20000090 	.word	0x20000090
 80003d8:	20000000 	.word	0x20000000

080003dc <GreenLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLed */
void GreenLed(void *argument)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLed */
  /* Infinite loop */
  for(;;)
  {
      GreenFlag = 1;
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <GreenLed+0x5c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
      // Turn on Green LED
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f0:	4812      	ldr	r0, [pc, #72]	@ (800043c <GreenLed+0x60>)
 80003f2:	f000 fc29 	bl	8000c48 <HAL_GPIO_WritePin>

      // Enter critical section
      osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <GreenLed+0x64>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a12      	ldr	r2, [pc, #72]	@ (8000444 <GreenLed+0x68>)
 80003fc:	8812      	ldrh	r2, [r2, #0]
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fca3 	bl	8001d4c <osSemaphoreAcquire>
      AccessSharedData();
 8000406:	f000 f81f 	bl	8000448 <AccessSharedData>
      osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 800040a:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <GreenLed+0x64>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fd02 	bl	8001e18 <osSemaphoreRelease>

      // Turn off Green LED
      osDelay(200);
 8000414:	20c8      	movs	r0, #200	@ 0xc8
 8000416:	f001 fbcf 	bl	8001bb8 <osDelay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000420:	4806      	ldr	r0, [pc, #24]	@ (800043c <GreenLed+0x60>)
 8000422:	f000 fc11 	bl	8000c48 <HAL_GPIO_WritePin>

      GreenFlag = 0;
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <GreenLed+0x5c>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
      // Delay for 500 milliseconds
      osDelay(200);
 800042c:	20c8      	movs	r0, #200	@ 0xc8
 800042e:	f001 fbc3 	bl	8001bb8 <osDelay>
  {
 8000432:	bf00      	nop
 8000434:	e7d6      	b.n	80003e4 <GreenLed+0x8>
 8000436:	bf00      	nop
 8000438:	20000096 	.word	0x20000096
 800043c:	40011000 	.word	0x40011000
 8000440:	20000090 	.word	0x20000090
 8000444:	20000000 	.word	0x20000000

08000448 <AccessSharedData>:
  }
  /* USER CODE END GreenLed */
}

void AccessSharedData(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    if (StartFlag == 1) {
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <AccessSharedData+0x3c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d103      	bne.n	800045c <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 8000454:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <AccessSharedData+0x3c>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	e005      	b.n	8000468 <AccessSharedData+0x20>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000462:	4809      	ldr	r0, [pc, #36]	@ (8000488 <AccessSharedData+0x40>)
 8000464:	f000 fbf0 	bl	8000c48 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
    SimulateReadWriteOperation();
 8000468:	f000 f810 	bl	800048c <SimulateReadWriteOperation>

    // Set Start flag back to Up to indicate resource is free
    StartFlag = 1;
 800046c:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <AccessSharedData+0x3c>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000478:	4803      	ldr	r0, [pc, #12]	@ (8000488 <AccessSharedData+0x40>)
 800047a:	f000 fbe5 	bl	8000c48 <HAL_GPIO_WritePin>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000094 	.word	0x20000094
 8000488:	40011000 	.word	0x40011000

0800048c <SimulateReadWriteOperation>:

void SimulateReadWriteOperation(void) {
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
    volatile uint32_t delay_count = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	603b      	str	r3, [r7, #0]
    const uint32_t delay_target = 2000000; // Adjust this value to approximate 500 ms
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <SimulateReadWriteOperation+0x30>)
 8000498:	607b      	str	r3, [r7, #4]

    // Dummy loop to simulate processing time
    for (delay_count = 0; delay_count < delay_target; delay_count++) {
 800049a:	2300      	movs	r3, #0
 800049c:	603b      	str	r3, [r7, #0]
 800049e:	e003      	b.n	80004a8 <SimulateReadWriteOperation+0x1c>
        __asm("nop"); // No Operation: Keeps the processor busy without changing code behavior
 80004a0:	bf00      	nop
    for (delay_count = 0; delay_count < delay_target; delay_count++) {
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d8f7      	bhi.n	80004a0 <SimulateReadWriteOperation+0x14>
    }
}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	001e8480 	.word	0x001e8480

080004c0 <OrangeLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeLed */
void OrangeLed(void *argument)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeLed */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80004c8:	2101      	movs	r1, #1
 80004ca:	4804      	ldr	r0, [pc, #16]	@ (80004dc <OrangeLed+0x1c>)
 80004cc:	f000 fbd4 	bl	8000c78 <HAL_GPIO_TogglePin>
	  osDelay(50);
 80004d0:	2032      	movs	r0, #50	@ 0x32
 80004d2:	f001 fb71 	bl	8001bb8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80004d6:	bf00      	nop
 80004d8:	e7f6      	b.n	80004c8 <OrangeLed+0x8>
 80004da:	bf00      	nop
 80004dc:	40010800 	.word	0x40010800

080004e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d101      	bne.n	80004f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f2:	f000 f929 	bl	8000748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40000800 	.word	0x40000800

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b18      	ldr	r3, [pc, #96]	@ (8000578 <HAL_MspInit+0x68>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a17      	ldr	r2, [pc, #92]	@ (8000578 <HAL_MspInit+0x68>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <HAL_MspInit+0x68>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <HAL_MspInit+0x68>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a11      	ldr	r2, [pc, #68]	@ (8000578 <HAL_MspInit+0x68>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_MspInit+0x68>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	210f      	movs	r1, #15
 800054a:	f06f 0001 	mvn.w	r0, #1
 800054e:	f000 f9cc 	bl	80008ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000552:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <HAL_MspInit+0x6c>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	4a04      	ldr	r2, [pc, #16]	@ (800057c <HAL_MspInit+0x6c>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	40010000 	.word	0x40010000

08000580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	@ 0x38
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000588:	2300      	movs	r3, #0
 800058a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800058c:	2300      	movs	r3, #0
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000590:	2300      	movs	r3, #0
 8000592:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000596:	4b34      	ldr	r3, [pc, #208]	@ (8000668 <HAL_InitTick+0xe8>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a33      	ldr	r2, [pc, #204]	@ (8000668 <HAL_InitTick+0xe8>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <HAL_InitTick+0xe8>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ae:	f107 0210 	add.w	r2, r7, #16
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff55 	bl	8001468 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d103      	bne.n	80005d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005c8:	f000 ff3a 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 80005cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80005ce:	e004      	b.n	80005da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005d0:	f000 ff36 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 80005d4:	4603      	mov	r3, r0
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005dc:	4a23      	ldr	r2, [pc, #140]	@ (800066c <HAL_InitTick+0xec>)
 80005de:	fba2 2303 	umull	r2, r3, r2, r3
 80005e2:	0c9b      	lsrs	r3, r3, #18
 80005e4:	3b01      	subs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005e8:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <HAL_InitTick+0xf0>)
 80005ea:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <HAL_InitTick+0xf4>)
 80005ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <HAL_InitTick+0xf0>)
 80005f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005f4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000670 <HAL_InitTick+0xf0>)
 80005f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005fa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <HAL_InitTick+0xf0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <HAL_InitTick+0xf0>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <HAL_InitTick+0xf0>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800060e:	4818      	ldr	r0, [pc, #96]	@ (8000670 <HAL_InitTick+0xf0>)
 8000610:	f000 ff78 	bl	8001504 <HAL_TIM_Base_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800061a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000622:	4813      	ldr	r0, [pc, #76]	@ (8000670 <HAL_InitTick+0xf0>)
 8000624:	f000 ffc6 	bl	80015b4 <HAL_TIM_Base_Start_IT>
 8000628:	4603      	mov	r3, r0
 800062a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800062e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000632:	2b00      	cmp	r3, #0
 8000634:	d111      	bne.n	800065a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000636:	201e      	movs	r0, #30
 8000638:	f000 f973 	bl	8000922 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b0f      	cmp	r3, #15
 8000640:	d808      	bhi.n	8000654 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000642:	2200      	movs	r2, #0
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	201e      	movs	r0, #30
 8000648:	f000 f94f 	bl	80008ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800064c:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <HAL_InitTick+0xf8>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e002      	b.n	800065a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800065a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800065e:	4618      	mov	r0, r3
 8000660:	3738      	adds	r7, #56	@ 0x38
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	431bde83 	.word	0x431bde83
 8000670:	20000098 	.word	0x20000098
 8000674:	40000800 	.word	0x40000800
 8000678:	20000008 	.word	0x20000008

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <MemManage_Handler+0x4>

08000694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <TIM4_IRQHandler+0x10>)
 80006b6:	f000 ffcf 	bl	8001658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000098 	.word	0x20000098

080006c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d0:	f7ff fff8 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480b      	ldr	r0, [pc, #44]	@ (8000704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006d6:	490c      	ldr	r1, [pc, #48]	@ (8000708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a09      	ldr	r2, [pc, #36]	@ (8000710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ec:	4c09      	ldr	r4, [pc, #36]	@ (8000714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fa:	f004 fc7d 	bl	8004ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd27 	bl	8000150 <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800070c:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 8000710:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000714:	20001c04 	.word	0x20001c04

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	@ (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f8d1 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f7ff ff24 	bl	8000580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff feea 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <HAL_IncTick+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_IncTick+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a03      	ldr	r2, [pc, #12]	@ (8000768 <HAL_IncTick+0x20>)
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	2000000c 	.word	0x2000000c
 8000768:	200000e0 	.word	0x200000e0

0800076c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	@ (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200000e0 	.word	0x200000e0

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4906      	ldr	r1, [pc, #24]	@ (8000818 <__NVIC_EnableIRQ+0x34>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	@ (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	@ (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	@ 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	@ 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff4f 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff64 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ffb2 	bl	8000870 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff81 	bl	800081c <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff57 	bl	80007e4 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b08b      	sub	sp, #44	@ 0x2c
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000952:	e169      	b.n	8000c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000954:	2201      	movs	r2, #1
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	429a      	cmp	r2, r3
 800096e:	f040 8158 	bne.w	8000c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4a9a      	ldr	r2, [pc, #616]	@ (8000be0 <HAL_GPIO_Init+0x2a0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d05e      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 800097c:	4a98      	ldr	r2, [pc, #608]	@ (8000be0 <HAL_GPIO_Init+0x2a0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d875      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 8000982:	4a98      	ldr	r2, [pc, #608]	@ (8000be4 <HAL_GPIO_Init+0x2a4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d058      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 8000988:	4a96      	ldr	r2, [pc, #600]	@ (8000be4 <HAL_GPIO_Init+0x2a4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d86f      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 800098e:	4a96      	ldr	r2, [pc, #600]	@ (8000be8 <HAL_GPIO_Init+0x2a8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d052      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 8000994:	4a94      	ldr	r2, [pc, #592]	@ (8000be8 <HAL_GPIO_Init+0x2a8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d869      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 800099a:	4a94      	ldr	r2, [pc, #592]	@ (8000bec <HAL_GPIO_Init+0x2ac>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d04c      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 80009a0:	4a92      	ldr	r2, [pc, #584]	@ (8000bec <HAL_GPIO_Init+0x2ac>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d863      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 80009a6:	4a92      	ldr	r2, [pc, #584]	@ (8000bf0 <HAL_GPIO_Init+0x2b0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d046      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 80009ac:	4a90      	ldr	r2, [pc, #576]	@ (8000bf0 <HAL_GPIO_Init+0x2b0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d85d      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 80009b2:	2b12      	cmp	r3, #18
 80009b4:	d82a      	bhi.n	8000a0c <HAL_GPIO_Init+0xcc>
 80009b6:	2b12      	cmp	r3, #18
 80009b8:	d859      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 80009ba:	a201      	add	r2, pc, #4	@ (adr r2, 80009c0 <HAL_GPIO_Init+0x80>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	08000a3b 	.word	0x08000a3b
 80009c4:	08000a15 	.word	0x08000a15
 80009c8:	08000a27 	.word	0x08000a27
 80009cc:	08000a69 	.word	0x08000a69
 80009d0:	08000a6f 	.word	0x08000a6f
 80009d4:	08000a6f 	.word	0x08000a6f
 80009d8:	08000a6f 	.word	0x08000a6f
 80009dc:	08000a6f 	.word	0x08000a6f
 80009e0:	08000a6f 	.word	0x08000a6f
 80009e4:	08000a6f 	.word	0x08000a6f
 80009e8:	08000a6f 	.word	0x08000a6f
 80009ec:	08000a6f 	.word	0x08000a6f
 80009f0:	08000a6f 	.word	0x08000a6f
 80009f4:	08000a6f 	.word	0x08000a6f
 80009f8:	08000a6f 	.word	0x08000a6f
 80009fc:	08000a6f 	.word	0x08000a6f
 8000a00:	08000a6f 	.word	0x08000a6f
 8000a04:	08000a1d 	.word	0x08000a1d
 8000a08:	08000a31 	.word	0x08000a31
 8000a0c:	4a79      	ldr	r2, [pc, #484]	@ (8000bf4 <HAL_GPIO_Init+0x2b4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a12:	e02c      	b.n	8000a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e029      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	3304      	adds	r3, #4
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	e024      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e01f      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	330c      	adds	r3, #12
 8000a36:	623b      	str	r3, [r7, #32]
          break;
 8000a38:	e01a      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a42:	2304      	movs	r3, #4
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e013      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d105      	bne.n	8000a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a50:	2308      	movs	r3, #8
 8000a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	611a      	str	r2, [r3, #16]
          break;
 8000a5a:	e009      	b.n	8000a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	615a      	str	r2, [r3, #20]
          break;
 8000a66:	e003      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e000      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          break;
 8000a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	2bff      	cmp	r3, #255	@ 0xff
 8000a74:	d801      	bhi.n	8000a7a <HAL_GPIO_Init+0x13a>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	e001      	b.n	8000a7e <HAL_GPIO_Init+0x13e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	2bff      	cmp	r3, #255	@ 0xff
 8000a84:	d802      	bhi.n	8000a8c <HAL_GPIO_Init+0x14c>
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	e002      	b.n	8000a92 <HAL_GPIO_Init+0x152>
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8e:	3b08      	subs	r3, #8
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	210f      	movs	r1, #15
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	6a39      	ldr	r1, [r7, #32]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	431a      	orrs	r2, r3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 80b1 	beq.w	8000c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ad8:	4a48      	ldr	r2, [pc, #288]	@ (8000bfc <HAL_GPIO_Init+0x2bc>)
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	220f      	movs	r2, #15
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a40      	ldr	r2, [pc, #256]	@ (8000c00 <HAL_GPIO_Init+0x2c0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d013      	beq.n	8000b2c <HAL_GPIO_Init+0x1ec>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a3f      	ldr	r2, [pc, #252]	@ (8000c04 <HAL_GPIO_Init+0x2c4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d00d      	beq.n	8000b28 <HAL_GPIO_Init+0x1e8>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c08 <HAL_GPIO_Init+0x2c8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d007      	beq.n	8000b24 <HAL_GPIO_Init+0x1e4>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a3d      	ldr	r2, [pc, #244]	@ (8000c0c <HAL_GPIO_Init+0x2cc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d101      	bne.n	8000b20 <HAL_GPIO_Init+0x1e0>
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e006      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e004      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b24:	2302      	movs	r3, #2
 8000b26:	e002      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b30:	f002 0203 	and.w	r2, r2, #3
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	4093      	lsls	r3, r2
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b3e:	492f      	ldr	r1, [pc, #188]	@ (8000bfc <HAL_GPIO_Init+0x2bc>)
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	3302      	adds	r3, #2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	492c      	ldr	r1, [pc, #176]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	608b      	str	r3, [r1, #8]
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4928      	ldr	r1, [pc, #160]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b80:	4b23      	ldr	r3, [pc, #140]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	4922      	ldr	r1, [pc, #136]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60cb      	str	r3, [r1, #12]
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	491e      	ldr	r1, [pc, #120]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	4918      	ldr	r1, [pc, #96]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4914      	ldr	r1, [pc, #80]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d021      	beq.n	8000c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	490e      	ldr	r1, [pc, #56]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	600b      	str	r3, [r1, #0]
 8000bdc:	e021      	b.n	8000c22 <HAL_GPIO_Init+0x2e2>
 8000bde:	bf00      	nop
 8000be0:	10320000 	.word	0x10320000
 8000be4:	10310000 	.word	0x10310000
 8000be8:	10220000 	.word	0x10220000
 8000bec:	10210000 	.word	0x10210000
 8000bf0:	10120000 	.word	0x10120000
 8000bf4:	10110000 	.word	0x10110000
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010000 	.word	0x40010000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	40010c00 	.word	0x40010c00
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40011400 	.word	0x40011400
 8000c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_GPIO_Init+0x304>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4909      	ldr	r1, [pc, #36]	@ (8000c44 <HAL_GPIO_Init+0x304>)
 8000c1e:	4013      	ands	r3, r2
 8000c20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c24:	3301      	adds	r3, #1
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f47f ae8e 	bne.w	8000954 <HAL_GPIO_Init+0x14>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	372c      	adds	r7, #44	@ 0x2c
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
 8000c54:	4613      	mov	r3, r2
 8000c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c58:	787b      	ldrb	r3, [r7, #1]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c64:	e003      	b.n	8000c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	041a      	lsls	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	611a      	str	r2, [r3, #16]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	041a      	lsls	r2, r3, #16
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43d9      	mvns	r1, r3
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	400b      	ands	r3, r1
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	611a      	str	r2, [r3, #16]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
	...

08000cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e272      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8087 	beq.w	8000dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ccc:	4b92      	ldr	r3, [pc, #584]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d00c      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d112      	bne.n	8000d0a <HAL_RCC_OscConfig+0x5e>
 8000ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cf0:	d10b      	bne.n	8000d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf2:	4b89      	ldr	r3, [pc, #548]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d06c      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x12c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d168      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e24c      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d12:	d106      	bne.n	8000d22 <HAL_RCC_OscConfig+0x76>
 8000d14:	4b80      	ldr	r3, [pc, #512]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a7f      	ldr	r2, [pc, #508]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e02e      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x98>
 8000d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a7a      	ldr	r2, [pc, #488]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b78      	ldr	r3, [pc, #480]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a77      	ldr	r2, [pc, #476]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e01d      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0xbc>
 8000d4e:	4b72      	ldr	r3, [pc, #456]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a71      	ldr	r2, [pc, #452]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a6e      	ldr	r2, [pc, #440]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d68:	4b6b      	ldr	r3, [pc, #428]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a6a      	ldr	r2, [pc, #424]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b68      	ldr	r3, [pc, #416]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a67      	ldr	r2, [pc, #412]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d013      	beq.n	8000db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fcf0 	bl	800076c <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fcec 	bl	800076c <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	@ 0x64
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e200      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f0      	beq.n	8000d90 <HAL_RCC_OscConfig+0xe4>
 8000dae:	e014      	b.n	8000dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fcdc 	bl	800076c <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fcd8 	bl	800076c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	@ 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1ec      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x10c>
 8000dd6:	e000      	b.n	8000dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d063      	beq.n	8000eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de6:	4b4c      	ldr	r3, [pc, #304]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000df2:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d11c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x18c>
 8000dfe:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0a:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <HAL_RCC_OscConfig+0x176>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d001      	beq.n	8000e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e1c0      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e22:	4b3d      	ldr	r3, [pc, #244]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4939      	ldr	r1, [pc, #228]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e36:	e03a      	b.n	8000eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d020      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e40:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <HAL_RCC_OscConfig+0x270>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e46:	f7ff fc91 	bl	800076c <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fc8d 	bl	800076c <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e1a1      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4927      	ldr	r1, [pc, #156]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
 8000e80:	e015      	b.n	8000eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <HAL_RCC_OscConfig+0x270>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fc70 	bl	800076c <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc6c 	bl	800076c <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e180      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f0      	bne.n	8000e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d03a      	beq.n	8000f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d019      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <HAL_RCC_OscConfig+0x274>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fc50 	bl	800076c <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc4c 	bl	800076c <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e160      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 faea 	bl	80014c8 <RCC_Delay>
 8000ef4:	e01c      	b.n	8000f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_RCC_OscConfig+0x274>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efc:	f7ff fc36 	bl	800076c <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f02:	e00f      	b.n	8000f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff fc32 	bl	800076c <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d908      	bls.n	8000f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e146      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	42420000 	.word	0x42420000
 8000f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f24:	4b92      	ldr	r3, [pc, #584]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1e9      	bne.n	8000f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a6 	beq.w	800108a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f42:	4b8b      	ldr	r3, [pc, #556]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10d      	bne.n	8000f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b88      	ldr	r3, [pc, #544]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a87      	ldr	r2, [pc, #540]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b85      	ldr	r3, [pc, #532]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f66:	2301      	movs	r3, #1
 8000f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6a:	4b82      	ldr	r3, [pc, #520]	@ (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d118      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f76:	4b7f      	ldr	r3, [pc, #508]	@ (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fbf3 	bl	800076c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8a:	f7ff fbef 	bl	800076c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b64      	cmp	r3, #100	@ 0x64
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e103      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	4b75      	ldr	r3, [pc, #468]	@ (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x312>
 8000fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	e02d      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x334>
 8000fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a69      	ldr	r2, [pc, #420]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	4b67      	ldr	r3, [pc, #412]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a66      	ldr	r2, [pc, #408]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	e01c      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d10c      	bne.n	8001002 <HAL_RCC_OscConfig+0x356>
 8000fe8:	4b61      	ldr	r3, [pc, #388]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a60      	ldr	r2, [pc, #384]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	4b5e      	ldr	r3, [pc, #376]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a5d      	ldr	r2, [pc, #372]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	e00b      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8001002:	4b5b      	ldr	r3, [pc, #364]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a5a      	ldr	r2, [pc, #360]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b58      	ldr	r3, [pc, #352]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a57      	ldr	r2, [pc, #348]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d015      	beq.n	800104e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff fba3 	bl	800076c <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff fb9f 	bl	800076c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e0b1      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	4b4b      	ldr	r3, [pc, #300]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0ee      	beq.n	800102a <HAL_RCC_OscConfig+0x37e>
 800104c:	e014      	b.n	8001078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104e:	f7ff fb8d 	bl	800076c <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	e00a      	b.n	800106c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fb89 	bl	800076c <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001064:	4293      	cmp	r3, r2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e09b      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	4b40      	ldr	r3, [pc, #256]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1ee      	bne.n	8001056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d105      	bne.n	800108a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a3b      	ldr	r2, [pc, #236]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8087 	beq.w	80011a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001094:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	d061      	beq.n	8001164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d146      	bne.n	8001136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a8:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <HAL_RCC_OscConfig+0x4cc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fb5d 	bl	800076c <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fb59 	bl	800076c <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e06d      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f0      	bne.n	80010b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010dc:	d108      	bne.n	80010f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	4921      	ldr	r1, [pc, #132]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a19      	ldr	r1, [r3, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001100:	430b      	orrs	r3, r1
 8001102:	491b      	ldr	r1, [pc, #108]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <HAL_RCC_OscConfig+0x4cc>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fb2d 	bl	800076c <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001116:	f7ff fb29 	bl	800076c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e03d      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x46a>
 8001134:	e035      	b.n	80011a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <HAL_RCC_OscConfig+0x4cc>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fb16 	bl	800076c <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fb12 	bl	800076c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e026      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x498>
 8001162:	e01e      	b.n	80011a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d107      	bne.n	800117c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e019      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
 8001170:	40021000 	.word	0x40021000
 8001174:	40007000 	.word	0x40007000
 8001178:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <HAL_RCC_OscConfig+0x500>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	429a      	cmp	r2, r3
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	429a      	cmp	r2, r3
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0d0      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d910      	bls.n	80011f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b67      	ldr	r3, [pc, #412]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 0207 	bic.w	r2, r3, #7
 80011da:	4965      	ldr	r1, [pc, #404]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e2:	4b63      	ldr	r3, [pc, #396]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e0b8      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d020      	beq.n	8001242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800120c:	4b59      	ldr	r3, [pc, #356]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a58      	ldr	r2, [pc, #352]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001224:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800122e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001230:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	494d      	ldr	r1, [pc, #308]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d040      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b47      	ldr	r3, [pc, #284]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d115      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e07f      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e073      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b3d      	ldr	r3, [pc, #244]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06b      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128e:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f023 0203 	bic.w	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4936      	ldr	r1, [pc, #216]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff fa64 	bl	800076c <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	e00a      	b.n	80012be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f7ff fa60 	bl	800076c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e053      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 020c 	and.w	r2, r3, #12
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1eb      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d210      	bcs.n	8001300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4922      	ldr	r1, [pc, #136]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e032      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4916      	ldr	r1, [pc, #88]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d009      	beq.n	800133e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	490e      	ldr	r1, [pc, #56]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800133e:	f000 f821 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 8001342:	4602      	mov	r2, r0
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	490a      	ldr	r1, [pc, #40]	@ (8001378 <HAL_RCC_ClockConfig+0x1c8>)
 8001350:	5ccb      	ldrb	r3, [r1, r3]
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	4a09      	ldr	r2, [pc, #36]	@ (800137c <HAL_RCC_ClockConfig+0x1cc>)
 8001358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_RCC_ClockConfig+0x1d0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f90e 	bl	8000580 <HAL_InitTick>

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40022000 	.word	0x40022000
 8001374:	40021000 	.word	0x40021000
 8001378:	08005220 	.word	0x08005220
 800137c:	20000004 	.word	0x20000004
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800139e:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x94>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d002      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0x30>
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d003      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x36>
 80013b2:	e027      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_RCC_GetSysClockFreq+0x98>)
 80013b6:	613b      	str	r3, [r7, #16]
      break;
 80013b8:	e027      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d010      	beq.n	80013f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_RCC_GetSysClockFreq+0x94>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	0c5b      	lsrs	r3, r3, #17
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <HAL_RCC_GetSysClockFreq+0x98>)
 80013e6:	fb03 f202 	mul.w	r2, r3, r2
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e004      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	613b      	str	r3, [r7, #16]
      break;
 8001402:	e002      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <HAL_RCC_GetSysClockFreq+0x98>)
 8001406:	613b      	str	r3, [r7, #16]
      break;
 8001408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800140a:	693b      	ldr	r3, [r7, #16]
}
 800140c:	4618      	mov	r0, r3
 800140e:	371c      	adds	r7, #28
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	007a1200 	.word	0x007a1200
 8001420:	08005238 	.word	0x08005238
 8001424:	08005248 	.word	0x08005248
 8001428:	003d0900 	.word	0x003d0900

0800142c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001430:	4b02      	ldr	r3, [pc, #8]	@ (800143c <HAL_RCC_GetHCLKFreq+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001444:	f7ff fff2 	bl	800142c <HAL_RCC_GetHCLKFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4903      	ldr	r1, [pc, #12]	@ (8001464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	08005230 	.word	0x08005230

08001468 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	220f      	movs	r2, #15
 8001476:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_RCC_GetClockConfig+0x58>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0203 	and.w	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <HAL_RCC_GetClockConfig+0x58>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_RCC_GetClockConfig+0x58>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_RCC_GetClockConfig+0x58>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_RCC_GetClockConfig+0x5c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0207 	and.w	r2, r3, #7
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40022000 	.word	0x40022000

080014c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <RCC_Delay+0x34>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <RCC_Delay+0x38>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0a5b      	lsrs	r3, r3, #9
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e4:	bf00      	nop
  }
  while (Delay --);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e5a      	subs	r2, r3, #1
 80014ea:	60fa      	str	r2, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f9      	bne.n	80014e4 <RCC_Delay+0x1c>
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000004 	.word	0x20000004
 8001500:	10624dd3 	.word	0x10624dd3

08001504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e041      	b.n	800159a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f839 	bl	80015a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3304      	adds	r3, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f000 f9b4 	bl	80018b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d001      	beq.n	80015cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e03a      	b.n	8001642 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <HAL_TIM_Base_Start_IT+0x98>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00e      	beq.n	800160c <HAL_TIM_Base_Start_IT+0x58>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f6:	d009      	beq.n	800160c <HAL_TIM_Base_Start_IT+0x58>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <HAL_TIM_Base_Start_IT+0x9c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d004      	beq.n	800160c <HAL_TIM_Base_Start_IT+0x58>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <HAL_TIM_Base_Start_IT+0xa0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d111      	bne.n	8001630 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b06      	cmp	r3, #6
 800161c:	d010      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162e:	e007      	b.n	8001640 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40012c00 	.word	0x40012c00
 8001650:	40000400 	.word	0x40000400
 8001654:	40000800 	.word	0x40000800

08001658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b02      	cmp	r3, #2
 800166c:	d122      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b02      	cmp	r3, #2
 800167a:	d11b      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f06f 0202 	mvn.w	r2, #2
 8001684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8ed 	bl	800187a <HAL_TIM_IC_CaptureCallback>
 80016a0:	e005      	b.n	80016ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f8e0 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f8ef 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d122      	bne.n	8001708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d11b      	bne.n	8001708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0204 	mvn.w	r2, #4
 80016d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2202      	movs	r2, #2
 80016de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f8c3 	bl	800187a <HAL_TIM_IC_CaptureCallback>
 80016f4:	e005      	b.n	8001702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8b6 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f8c5 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b08      	cmp	r3, #8
 8001714:	d122      	bne.n	800175c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b08      	cmp	r3, #8
 8001722:	d11b      	bne.n	800175c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0208 	mvn.w	r2, #8
 800172c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2204      	movs	r2, #4
 8001732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f899 	bl	800187a <HAL_TIM_IC_CaptureCallback>
 8001748:	e005      	b.n	8001756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f88c 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f89b 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b10      	cmp	r3, #16
 8001768:	d122      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b10      	cmp	r3, #16
 8001776:	d11b      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0210 	mvn.w	r2, #16
 8001780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2208      	movs	r2, #8
 8001786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f86f 	bl	800187a <HAL_TIM_IC_CaptureCallback>
 800179c:	e005      	b.n	80017aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f862 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f871 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10e      	bne.n	80017dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0201 	mvn.w	r2, #1
 80017d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7fe fe82 	bl	80004e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	2b80      	cmp	r3, #128	@ 0x80
 80017e8:	d10e      	bne.n	8001808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f4:	2b80      	cmp	r3, #128	@ 0x80
 80017f6:	d107      	bne.n	8001808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f8bf 	bl	8001986 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001812:	2b40      	cmp	r3, #64	@ 0x40
 8001814:	d10e      	bne.n	8001834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001820:	2b40      	cmp	r3, #64	@ 0x40
 8001822:	d107      	bne.n	8001834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800182c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f835 	bl	800189e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b20      	cmp	r3, #32
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b20      	cmp	r3, #32
 800184e:	d107      	bne.n	8001860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0220 	mvn.w	r2, #32
 8001858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f88a 	bl	8001974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a29      	ldr	r2, [pc, #164]	@ (8001968 <TIM_Base_SetConfig+0xb8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00b      	beq.n	80018e0 <TIM_Base_SetConfig+0x30>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ce:	d007      	beq.n	80018e0 <TIM_Base_SetConfig+0x30>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a26      	ldr	r2, [pc, #152]	@ (800196c <TIM_Base_SetConfig+0xbc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d003      	beq.n	80018e0 <TIM_Base_SetConfig+0x30>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a25      	ldr	r2, [pc, #148]	@ (8001970 <TIM_Base_SetConfig+0xc0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d108      	bne.n	80018f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001968 <TIM_Base_SetConfig+0xb8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00b      	beq.n	8001912 <TIM_Base_SetConfig+0x62>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001900:	d007      	beq.n	8001912 <TIM_Base_SetConfig+0x62>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <TIM_Base_SetConfig+0xbc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d003      	beq.n	8001912 <TIM_Base_SetConfig+0x62>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <TIM_Base_SetConfig+0xc0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d108      	bne.n	8001924 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <TIM_Base_SetConfig+0xb8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d103      	bne.n	8001958 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	615a      	str	r2, [r3, #20]
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40012c00 	.word	0x40012c00
 800196c:	40000400 	.word	0x40000400
 8001970:	40000800 	.word	0x40000800

08001974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800199e:	f3ef 8305 	mrs	r3, IPSR
 80019a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80019a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10f      	bne.n	80019ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019aa:	f3ef 8310 	mrs	r3, PRIMASK
 80019ae:	607b      	str	r3, [r7, #4]
  return(result);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <osKernelInitialize+0x32>
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <osKernelInitialize+0x60>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d109      	bne.n	80019d2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019be:	f3ef 8311 	mrs	r3, BASEPRI
 80019c2:	603b      	str	r3, [r7, #0]
  return(result);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80019ca:	f06f 0305 	mvn.w	r3, #5
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e00c      	b.n	80019ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <osKernelInitialize+0x60>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <osKernelInitialize+0x60>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e002      	b.n	80019ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019ec:	68fb      	ldr	r3, [r7, #12]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	200000e4 	.word	0x200000e4

080019fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a02:	f3ef 8305 	mrs	r3, IPSR
 8001a06:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10f      	bne.n	8001a2e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a12:	607b      	str	r3, [r7, #4]
  return(result);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <osKernelStart+0x32>
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <osKernelStart+0x64>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d109      	bne.n	8001a36 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a22:	f3ef 8311 	mrs	r3, BASEPRI
 8001a26:	603b      	str	r3, [r7, #0]
  return(result);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a2e:	f06f 0305 	mvn.w	r3, #5
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	e00e      	b.n	8001a54 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <osKernelStart+0x64>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <osKernelStart+0x64>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a44:	f001 fd36 	bl	80034b4 <vTaskStartScheduler>
      stat = osOK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e002      	b.n	8001a54 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a54:	68fb      	ldr	r3, [r7, #12]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200000e4 	.word	0x200000e4

08001a64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b092      	sub	sp, #72	@ 0x48
 8001a68:	af04      	add	r7, sp, #16
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a74:	f3ef 8305 	mrs	r3, IPSR
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f040 8094 	bne.w	8001baa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a82:	f3ef 8310 	mrs	r3, PRIMASK
 8001a86:	623b      	str	r3, [r7, #32]
  return(result);
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 808d 	bne.w	8001baa <osThreadNew+0x146>
 8001a90:	4b48      	ldr	r3, [pc, #288]	@ (8001bb4 <osThreadNew+0x150>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d106      	bne.n	8001aa6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a98:	f3ef 8311 	mrs	r3, BASEPRI
 8001a9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8082 	bne.w	8001baa <osThreadNew+0x146>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d07e      	beq.n	8001baa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001ab0:	2318      	movs	r3, #24
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001ab8:	f107 031b 	add.w	r3, r7, #27
 8001abc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d045      	beq.n	8001b56 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <osThreadNew+0x74>
        name = attr->name;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <osThreadNew+0x9a>
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aee:	2b38      	cmp	r3, #56	@ 0x38
 8001af0:	d805      	bhi.n	8001afe <osThreadNew+0x9a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <osThreadNew+0x9e>
        return (NULL);
 8001afe:	2300      	movs	r3, #0
 8001b00:	e054      	b.n	8001bac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00e      	beq.n	8001b38 <osThreadNew+0xd4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2ba7      	cmp	r3, #167	@ 0xa7
 8001b20:	d90a      	bls.n	8001b38 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <osThreadNew+0xd4>
        mem = 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b36:	e010      	b.n	8001b5a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10c      	bne.n	8001b5a <osThreadNew+0xf6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d108      	bne.n	8001b5a <osThreadNew+0xf6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d104      	bne.n	8001b5a <osThreadNew+0xf6>
          mem = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b54:	e001      	b.n	8001b5a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d110      	bne.n	8001b82 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b68:	9202      	str	r2, [sp, #8]
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f001 fab2 	bl	80030e0 <xTaskCreateStatic>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e013      	b.n	8001baa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d110      	bne.n	8001baa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f001 faff 	bl	800319e <xTaskCreate>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d001      	beq.n	8001baa <osThreadNew+0x146>
          hTask = NULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001baa:	697b      	ldr	r3, [r7, #20]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3738      	adds	r7, #56	@ 0x38
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200000e4 	.word	0x200000e4

08001bb8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bc0:	f3ef 8305 	mrs	r3, IPSR
 8001bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8001bc6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10f      	bne.n	8001bec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <osDelay+0x34>
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <osDelay+0x58>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d109      	bne.n	8001bf4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001be0:	f3ef 8311 	mrs	r3, BASEPRI
 8001be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <osDelay+0x3c>
    stat = osErrorISR;
 8001bec:	f06f 0305 	mvn.w	r3, #5
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e007      	b.n	8001c04 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f001 fc22 	bl	8003448 <vTaskDelay>
    }
  }

  return (stat);
 8001c04:	697b      	ldr	r3, [r7, #20]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200000e4 	.word	0x200000e4

08001c14 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	@ 0x30
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c24:	f3ef 8305 	mrs	r3, IPSR
 8001c28:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 8086 	bne.w	8001d3e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c32:	f3ef 8310 	mrs	r3, PRIMASK
 8001c36:	617b      	str	r3, [r7, #20]
  return(result);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d17f      	bne.n	8001d3e <osSemaphoreNew+0x12a>
 8001c3e:	4b42      	ldr	r3, [pc, #264]	@ (8001d48 <osSemaphoreNew+0x134>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d105      	bne.n	8001c52 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c46:	f3ef 8311 	mrs	r3, BASEPRI
 8001c4a:	613b      	str	r3, [r7, #16]
  return(result);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d175      	bne.n	8001d3e <osSemaphoreNew+0x12a>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d072      	beq.n	8001d3e <osSemaphoreNew+0x12a>
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d86e      	bhi.n	8001d3e <osSemaphoreNew+0x12a>
    mem = -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d015      	beq.n	8001c98 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <osSemaphoreNew+0x6e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b4f      	cmp	r3, #79	@ 0x4f
 8001c7a:	d902      	bls.n	8001c82 <osSemaphoreNew+0x6e>
        mem = 1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
 8001c80:	e00c      	b.n	8001c9c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <osSemaphoreNew+0x88>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d104      	bne.n	8001c9c <osSemaphoreNew+0x88>
          mem = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
 8001c96:	e001      	b.n	8001c9c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d04c      	beq.n	8001d3e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d128      	bne.n	8001cfc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10a      	bne.n	8001cc6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	9200      	str	r2, [sp, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f000 fa4f 	bl	8002160 <xQueueGenericCreateStatic>
 8001cc2:	6278      	str	r0, [r7, #36]	@ 0x24
 8001cc4:	e005      	b.n	8001cd2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 fac4 	bl	8002258 <xQueueGenericCreate>
 8001cd0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d022      	beq.n	8001d1e <osSemaphoreNew+0x10a>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01f      	beq.n	8001d1e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ce6:	f000 fb87 	bl	80023f8 <xQueueGenericSend>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d016      	beq.n	8001d1e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8001cf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cf2:	f001 f823 	bl	8002d3c <vQueueDelete>
            hSemaphore = NULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfa:	e010      	b.n	8001d1e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d108      	bne.n	8001d14 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fb06 	bl	800231c <xQueueCreateCountingSemaphoreStatic>
 8001d10:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d12:	e004      	b.n	8001d1e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fb39 	bl	800238e <xQueueCreateCountingSemaphore>
 8001d1c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00c      	beq.n	8001d3e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <osSemaphoreNew+0x11e>
          name = attr->name;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	e001      	b.n	8001d36 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001d36:	69f9      	ldr	r1, [r7, #28]
 8001d38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d3a:	f001 f94b 	bl	8002fd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3728      	adds	r7, #40	@ 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200000e4 	.word	0x200000e4

08001d4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d103      	bne.n	8001d6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001d64:	f06f 0303 	mvn.w	r3, #3
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e04b      	b.n	8001e04 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d6c:	f3ef 8305 	mrs	r3, IPSR
 8001d70:	617b      	str	r3, [r7, #20]
  return(result);
 8001d72:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10f      	bne.n	8001d98 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d78:	f3ef 8310 	mrs	r3, PRIMASK
 8001d7c:	613b      	str	r3, [r7, #16]
  return(result);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <osSemaphoreAcquire+0x4c>
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <osSemaphoreAcquire+0xc4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d128      	bne.n	8001dde <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8001d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d022      	beq.n	8001dde <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8001d9e:	f06f 0303 	mvn.w	r3, #3
 8001da2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001da4:	e02d      	b.n	8001e02 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	461a      	mov	r2, r3
 8001db0:	2100      	movs	r1, #0
 8001db2:	69b8      	ldr	r0, [r7, #24]
 8001db4:	f000 ff40 	bl	8002c38 <xQueueReceiveFromISR>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d003      	beq.n	8001dc6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8001dbe:	f06f 0302 	mvn.w	r3, #2
 8001dc2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001dc4:	e01d      	b.n	8001e02 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01a      	beq.n	8001e02 <osSemaphoreAcquire+0xb6>
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <osSemaphoreAcquire+0xc8>)
 8001dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8001ddc:	e011      	b.n	8001e02 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	69b8      	ldr	r0, [r7, #24]
 8001de2:	f000 fe19 	bl	8002a18 <xQueueSemaphoreTake>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d00b      	beq.n	8001e04 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8001df2:	f06f 0301 	mvn.w	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	e004      	b.n	8001e04 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8001dfa:	f06f 0302 	mvn.w	r3, #2
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	e000      	b.n	8001e04 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8001e02:	bf00      	nop
      }
    }
  }

  return (stat);
 8001e04:	69fb      	ldr	r3, [r7, #28]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200000e4 	.word	0x200000e4
 8001e14:	e000ed04 	.word	0xe000ed04

08001e18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001e2e:	f06f 0303 	mvn.w	r3, #3
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	e03e      	b.n	8001eb4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e36:	f3ef 8305 	mrs	r3, IPSR
 8001e3a:	617b      	str	r3, [r7, #20]
  return(result);
 8001e3c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e42:	f3ef 8310 	mrs	r3, PRIMASK
 8001e46:	613b      	str	r3, [r7, #16]
  return(result);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <osSemaphoreRelease+0x4a>
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <osSemaphoreRelease+0xa8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d120      	bne.n	8001e98 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e56:	f3ef 8311 	mrs	r3, BASEPRI
 8001e5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01a      	beq.n	8001e98 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	69b8      	ldr	r0, [r7, #24]
 8001e6e:	f000 fc60 	bl	8002732 <xQueueGiveFromISR>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d003      	beq.n	8001e80 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001e78:	f06f 0302 	mvn.w	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001e7e:	e018      	b.n	8001eb2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d015      	beq.n	8001eb2 <osSemaphoreRelease+0x9a>
 8001e86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <osSemaphoreRelease+0xac>)
 8001e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001e96:	e00c      	b.n	8001eb2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	69b8      	ldr	r0, [r7, #24]
 8001ea0:	f000 faaa 	bl	80023f8 <xQueueGenericSend>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d004      	beq.n	8001eb4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001eaa:	f06f 0302 	mvn.w	r3, #2
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	e000      	b.n	8001eb4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001eb2:	bf00      	nop
    }
  }

  return (stat);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200000e4 	.word	0x200000e4
 8001ec4:	e000ed04 	.word	0xe000ed04

08001ec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <vApplicationGetIdleTaskMemory+0x28>)
 8001ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	200000e8 	.word	0x200000e8
 8001ef4:	20000190 	.word	0x20000190

08001ef8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	4a06      	ldr	r2, [pc, #24]	@ (8001f28 <vApplicationGetTimerTaskMemory+0x30>)
 8001f0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000390 	.word	0x20000390
 8001f28:	20000438 	.word	0x20000438

08001f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 0208 	add.w	r2, r3, #8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f103 0208 	add.w	r2, r3, #8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f103 0208 	add.w	r2, r3, #8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d103      	bne.n	8001fe8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e00c      	b.n	8002002 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3308      	adds	r3, #8
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e002      	b.n	8001ff6 <vListInsert+0x2e>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d2f6      	bcs.n	8001ff0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6852      	ldr	r2, [r2, #4]
 8002058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	d103      	bne.n	800206c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020b8:	f002 fc60 	bl	800497c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	441a      	add	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	3b01      	subs	r3, #1
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	441a      	add	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	22ff      	movs	r2, #255	@ 0xff
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	22ff      	movs	r2, #255	@ 0xff
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d114      	bne.n	8002138 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01a      	beq.n	800214c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3310      	adds	r3, #16
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fc6a 	bl	80039f4 <xTaskRemoveFromEventList>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <xQueueGenericReset+0xd0>)
 8002128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	e009      	b.n	800214c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3310      	adds	r3, #16
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fef5 	bl	8001f2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3324      	adds	r3, #36	@ 0x24
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fef0 	bl	8001f2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800214c:	f002 fc46 	bl	80049dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000ed04 	.word	0xe000ed04

08002160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	@ 0x38
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10b      	bne.n	80021aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	f3bf 8f6f 	isb	sy
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	e7fd      	b.n	80021a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <xQueueGenericCreateStatic+0x56>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <xQueueGenericCreateStatic+0x5a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <xQueueGenericCreateStatic+0x5c>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	623b      	str	r3, [r7, #32]
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <xQueueGenericCreateStatic+0x84>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <xQueueGenericCreateStatic+0x88>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <xQueueGenericCreateStatic+0x8a>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80021ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	61fb      	str	r3, [r7, #28]
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	e7fd      	b.n	8002202 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002206:	2350      	movs	r3, #80	@ 0x50
 8002208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b50      	cmp	r3, #80	@ 0x50
 800220e:	d00b      	beq.n	8002228 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	61bb      	str	r3, [r7, #24]
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800223a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f844 	bl	80022d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800224e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002250:	4618      	mov	r0, r3
 8002252:	3730      	adds	r7, #48	@ 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	@ 0x28
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <xQueueGenericCreate+0x2c>
	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	613b      	str	r3, [r7, #16]
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e004      	b.n	800229a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3350      	adds	r3, #80	@ 0x50
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fc6e 	bl	8004b80 <pvPortMalloc>
 80022a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00f      	beq.n	80022cc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	3350      	adds	r3, #80	@ 0x50
 80022b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f805 	bl	80022d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80022cc:	69bb      	ldr	r3, [r7, #24]
	}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e002      	b.n	80022f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002304:	2101      	movs	r1, #1
 8002306:	69b8      	ldr	r0, [r7, #24]
 8002308:	f7ff fec0 	bl	800208c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800232e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	61bb      	str	r3, [r7, #24]
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	e7fd      	b.n	8002342 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	429a      	cmp	r2, r3
 800234c:	d90b      	bls.n	8002366 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	617b      	str	r3, [r7, #20]
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	e7fd      	b.n	8002362 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002366:	2302      	movs	r3, #2
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f7ff fef5 	bl	8002160 <xQueueGenericCreateStatic>
 8002376:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002384:	69fb      	ldr	r3, [r7, #28]
	}
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	613b      	str	r3, [r7, #16]
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	e7fd      	b.n	80023b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d90b      	bls.n	80023d6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80023be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	60fb      	str	r3, [r7, #12]
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	e7fd      	b.n	80023d2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80023d6:	2202      	movs	r2, #2
 80023d8:	2100      	movs	r1, #0
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff3c 	bl	8002258 <xQueueGenericCreate>
 80023e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80023ee:	697b      	ldr	r3, [r7, #20]
	}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08e      	sub	sp, #56	@ 0x38
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002406:	2300      	movs	r3, #0
 8002408:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800240e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <xQueueGenericSend+0x34>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <xQueueGenericSend+0x42>
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <xQueueGenericSend+0x46>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <xQueueGenericSend+0x48>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <xQueueGenericSend+0x64>
	__asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d103      	bne.n	800246a <xQueueGenericSend+0x72>
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <xQueueGenericSend+0x76>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGenericSend+0x78>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <xQueueGenericSend+0x94>
	__asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	623b      	str	r3, [r7, #32]
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800248c:	f001 fc7c 	bl	8003d88 <xTaskGetSchedulerState>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <xQueueGenericSend+0xa4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <xQueueGenericSend+0xa8>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <xQueueGenericSend+0xaa>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <xQueueGenericSend+0xc6>
	__asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	61fb      	str	r3, [r7, #28]
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	e7fd      	b.n	80024ba <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024be:	f002 fa5d 	bl	800497c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <xQueueGenericSend+0xdc>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d129      	bne.n	8002528 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024da:	f000 fc6a 	bl	8002db2 <prvCopyDataToQueue>
 80024de:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	3324      	adds	r3, #36	@ 0x24
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fa81 	bl	80039f4 <xTaskRemoveFromEventList>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024f8:	4b3f      	ldr	r3, [pc, #252]	@ (80025f8 <xQueueGenericSend+0x200>)
 80024fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	e00a      	b.n	8002520 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800250a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002510:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <xQueueGenericSend+0x200>)
 8002512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002520:	f002 fa5c 	bl	80049dc <vPortExitCritical>
				return pdPASS;
 8002524:	2301      	movs	r3, #1
 8002526:	e063      	b.n	80025f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800252e:	f002 fa55 	bl	80049dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002532:	2300      	movs	r3, #0
 8002534:	e05c      	b.n	80025f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fabb 	bl	8003abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002546:	2301      	movs	r3, #1
 8002548:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800254a:	f002 fa47 	bl	80049dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800254e:	f001 f821 	bl	8003594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002552:	f002 fa13 	bl	800497c <vPortEnterCritical>
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800255c:	b25b      	sxtb	r3, r3
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002562:	d103      	bne.n	800256c <xQueueGenericSend+0x174>
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800256c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002572:	b25b      	sxtb	r3, r3
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <xQueueGenericSend+0x18a>
 800257a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002582:	f002 fa2b 	bl	80049dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002586:	1d3a      	adds	r2, r7, #4
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f001 faaa 	bl	8003ae8 <xTaskCheckForTimeOut>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d124      	bne.n	80025e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800259a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800259c:	f000 fd01 	bl	8002fa2 <prvIsQueueFull>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	3310      	adds	r3, #16
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 f9ce 	bl	8003950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025b6:	f000 fc8c 	bl	8002ed2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025ba:	f000 fff9 	bl	80035b0 <xTaskResumeAll>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f af7c 	bne.w	80024be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80025c6:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <xQueueGenericSend+0x200>)
 80025c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	e772      	b.n	80024be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025da:	f000 fc7a 	bl	8002ed2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025de:	f000 ffe7 	bl	80035b0 <xTaskResumeAll>
 80025e2:	e76c      	b.n	80024be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025e6:	f000 fc74 	bl	8002ed2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025ea:	f000 ffe1 	bl	80035b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025ee:	2300      	movs	r3, #0
		}
	}
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3738      	adds	r7, #56	@ 0x38
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	@ 0x38
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <xQueueGenericSendFromISR+0x3e>
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <xQueueGenericSendFromISR+0x42>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericSendFromISR+0x44>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	623b      	str	r3, [r7, #32]
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d103      	bne.n	800266a <xQueueGenericSendFromISR+0x6e>
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <xQueueGenericSendFromISR+0x72>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <xQueueGenericSendFromISR+0x74>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	61fb      	str	r3, [r7, #28]
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800268c:	f002 fa38 	bl	8004b00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002690:	f3ef 8211 	mrs	r2, BASEPRI
 8002694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	61ba      	str	r2, [r7, #24]
 80026a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d302      	bcc.n	80026be <xQueueGenericSendFromISR+0xc2>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d12c      	bne.n	8002718 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026ce:	f000 fb70 	bl	8002db2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80026d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026da:	d112      	bne.n	8002702 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	3324      	adds	r3, #36	@ 0x24
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 f983 	bl	80039f4 <xTaskRemoveFromEventList>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00e      	beq.n	8002712 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e007      	b.n	8002712 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002702:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002706:	3301      	adds	r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	b25a      	sxtb	r2, r3
 800270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002712:	2301      	movs	r3, #1
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002716:	e001      	b.n	800271c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002718:	2300      	movs	r3, #0
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002726:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800272a:	4618      	mov	r0, r3
 800272c:	3738      	adds	r7, #56	@ 0x38
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b08e      	sub	sp, #56	@ 0x38
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10b      	bne.n	800275e <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	623b      	str	r3, [r7, #32]
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	e7fd      	b.n	800275a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800275e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	61fb      	str	r3, [r7, #28]
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	e7fd      	b.n	800277a <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800277e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <xQueueGiveFromISR+0x5c>
 8002786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <xQueueGiveFromISR+0x60>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <xQueueGiveFromISR+0x62>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	61bb      	str	r3, [r7, #24]
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b0:	f002 f9a6 	bl	8004b00 <vPortValidateInterruptPriority>
	__asm volatile
 80027b4:	f3ef 8211 	mrs	r2, BASEPRI
 80027b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	617a      	str	r2, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80027cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80027d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027dc:	429a      	cmp	r2, r3
 80027de:	d22b      	bcs.n	8002838 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d112      	bne.n	8002822 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	2b00      	cmp	r3, #0
 8002802:	d016      	beq.n	8002832 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002806:	3324      	adds	r3, #36	@ 0x24
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f8f3 	bl	80039f4 <xTaskRemoveFromEventList>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00e      	beq.n	8002832 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e007      	b.n	8002832 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002822:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002826:	3301      	adds	r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	b25a      	sxtb	r2, r3
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002832:	2301      	movs	r3, #1
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
 8002836:	e001      	b.n	800283c <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002838:	2300      	movs	r3, #0
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f383 8811 	msr	BASEPRI, r3
}
 8002846:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800284a:	4618      	mov	r0, r3
 800284c:	3738      	adds	r7, #56	@ 0x38
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	@ 0x30
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10b      	bne.n	8002886 <xQueueReceive+0x32>
	__asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	623b      	str	r3, [r7, #32]
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	e7fd      	b.n	8002882 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <xQueueReceive+0x40>
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <xQueueReceive+0x44>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <xQueueReceive+0x46>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10b      	bne.n	80028b6 <xQueueReceive+0x62>
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	61fb      	str	r3, [r7, #28]
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	e7fd      	b.n	80028b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028b6:	f001 fa67 	bl	8003d88 <xTaskGetSchedulerState>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <xQueueReceive+0x72>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <xQueueReceive+0x76>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <xQueueReceive+0x78>
 80028ca:	2300      	movs	r3, #0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <xQueueReceive+0x94>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	61bb      	str	r3, [r7, #24]
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028e8:	f002 f848 	bl	800497c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01f      	beq.n	8002938 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028fc:	f000 fac3 	bl	8002e86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00f      	beq.n	8002930 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002912:	3310      	adds	r3, #16
 8002914:	4618      	mov	r0, r3
 8002916:	f001 f86d 	bl	80039f4 <xTaskRemoveFromEventList>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002920:	4b3c      	ldr	r3, [pc, #240]	@ (8002a14 <xQueueReceive+0x1c0>)
 8002922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002930:	f002 f854 	bl	80049dc <vPortExitCritical>
				return pdPASS;
 8002934:	2301      	movs	r3, #1
 8002936:	e069      	b.n	8002a0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d103      	bne.n	8002946 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800293e:	f002 f84d 	bl	80049dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002942:	2300      	movs	r3, #0
 8002944:	e062      	b.n	8002a0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	4618      	mov	r0, r3
 8002952:	f001 f8b3 	bl	8003abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800295a:	f002 f83f 	bl	80049dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800295e:	f000 fe19 	bl	8003594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002962:	f002 f80b 	bl	800497c <vPortEnterCritical>
 8002966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <xQueueReceive+0x128>
 8002974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002982:	b25b      	sxtb	r3, r3
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d103      	bne.n	8002992 <xQueueReceive+0x13e>
 800298a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002992:	f002 f823 	bl	80049dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002996:	1d3a      	adds	r2, r7, #4
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 f8a2 	bl	8003ae8 <xTaskCheckForTimeOut>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d123      	bne.n	80029f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029ac:	f000 fae3 	bl	8002f76 <prvIsQueueEmpty>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d017      	beq.n	80029e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	3324      	adds	r3, #36	@ 0x24
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 ffc6 	bl	8003950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029c6:	f000 fa84 	bl	8002ed2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029ca:	f000 fdf1 	bl	80035b0 <xTaskResumeAll>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d189      	bne.n	80028e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80029d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <xQueueReceive+0x1c0>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	e780      	b.n	80028e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029e8:	f000 fa73 	bl	8002ed2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ec:	f000 fde0 	bl	80035b0 <xTaskResumeAll>
 80029f0:	e77a      	b.n	80028e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029f4:	f000 fa6d 	bl	8002ed2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029f8:	f000 fdda 	bl	80035b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029fe:	f000 faba 	bl	8002f76 <prvIsQueueEmpty>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f43f af6f 	beq.w	80028e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3730      	adds	r7, #48	@ 0x30
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	@ 0x38
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	623b      	str	r3, [r7, #32]
}
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	61fb      	str	r3, [r7, #28]
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a6c:	f001 f98c 	bl	8003d88 <xTaskGetSchedulerState>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <xQueueSemaphoreTake+0x64>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <xQueueSemaphoreTake+0x68>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <xQueueSemaphoreTake+0x6a>
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10b      	bne.n	8002a9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	61bb      	str	r3, [r7, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	e7fd      	b.n	8002a9a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a9e:	f001 ff6d 	bl	800497c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d024      	beq.n	8002af8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d104      	bne.n	8002ac8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002abe:	f001 fae7 	bl	8004090 <pvTaskIncrementMutexHeldCount>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00f      	beq.n	8002af0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	3310      	adds	r3, #16
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 ff8d 	bl	80039f4 <xTaskRemoveFromEventList>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ae0:	4b54      	ldr	r3, [pc, #336]	@ (8002c34 <xQueueSemaphoreTake+0x21c>)
 8002ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002af0:	f001 ff74 	bl	80049dc <vPortExitCritical>
				return pdPASS;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e098      	b.n	8002c2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d112      	bne.n	8002b24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	617b      	str	r3, [r7, #20]
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002b1c:	f001 ff5e 	bl	80049dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e082      	b.n	8002c2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 ffc4 	bl	8003abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b38:	f001 ff50 	bl	80049dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b3c:	f000 fd2a 	bl	8003594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b40:	f001 ff1c 	bl	800497c <vPortEnterCritical>
 8002b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d103      	bne.n	8002b5a <xQueueSemaphoreTake+0x142>
 8002b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d103      	bne.n	8002b70 <xQueueSemaphoreTake+0x158>
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b70:	f001 ff34 	bl	80049dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b74:	463a      	mov	r2, r7
 8002b76:	f107 030c 	add.w	r3, r7, #12
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 ffb3 	bl	8003ae8 <xTaskCheckForTimeOut>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d132      	bne.n	8002bee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b8a:	f000 f9f4 	bl	8002f76 <prvIsQueueEmpty>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d026      	beq.n	8002be2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002b9c:	f001 feee 	bl	800497c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f90d 	bl	8003dc4 <xTaskPriorityInherit>
 8002baa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002bac:	f001 ff16 	bl	80049dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb2:	3324      	adds	r3, #36	@ 0x24
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fec9 	bl	8003950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bc0:	f000 f987 	bl	8002ed2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bc4:	f000 fcf4 	bl	80035b0 <xTaskResumeAll>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f47f af67 	bne.w	8002a9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <xQueueSemaphoreTake+0x21c>)
 8002bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	e75d      	b.n	8002a9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002be2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002be4:	f000 f975 	bl	8002ed2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002be8:	f000 fce2 	bl	80035b0 <xTaskResumeAll>
 8002bec:	e757      	b.n	8002a9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002bee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bf0:	f000 f96f 	bl	8002ed2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bf4:	f000 fcdc 	bl	80035b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bfa:	f000 f9bc 	bl	8002f76 <prvIsQueueEmpty>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f43f af4c 	beq.w	8002a9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002c0c:	f001 feb6 	bl	800497c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002c10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c12:	f000 f8b7 	bl	8002d84 <prvGetDisinheritPriorityAfterTimeout>
 8002c16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 f9ae 	bl	8003f80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002c24:	f001 feda 	bl	80049dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3738      	adds	r7, #56	@ 0x38
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08e      	sub	sp, #56	@ 0x38
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10b      	bne.n	8002c66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	623b      	str	r3, [r7, #32]
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	e7fd      	b.n	8002c62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <xQueueReceiveFromISR+0x3c>
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <xQueueReceiveFromISR+0x40>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <xQueueReceiveFromISR+0x42>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	61fb      	str	r3, [r7, #28]
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	e7fd      	b.n	8002c92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c96:	f001 ff33 	bl	8004b00 <vPortValidateInterruptPriority>
	__asm volatile
 8002c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8002c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	61ba      	str	r2, [r7, #24]
 8002cb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002cb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02f      	beq.n	8002d22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cd0:	f000 f8d9 	bl	8002e86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	1e5a      	subs	r2, r3, #1
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002cdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d112      	bne.n	8002d0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	3310      	adds	r3, #16
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fe7e 	bl	80039f4 <xTaskRemoveFromEventList>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e007      	b.n	8002d1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d20:	e001      	b.n	8002d26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f383 8811 	msr	BASEPRI, r3
}
 8002d30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3738      	adds	r7, #56	@ 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <vQueueDelete+0x2a>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	60bb      	str	r3, [r7, #8]
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f95c 	bl	8003024 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f001 ffca 	bl	8004d10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e001      	b.n	8002da6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002da6:	68fb      	ldr	r3, [r7, #12]
	}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d14d      	bne.n	8002e74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 f85f 	bl	8003ea0 <xTaskPriorityDisinherit>
 8002de2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	e043      	b.n	8002e74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d119      	bne.n	8002e26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6898      	ldr	r0, [r3, #8]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	f002 f921 	bl	8005044 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d32b      	bcc.n	8002e74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	e026      	b.n	8002e74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	68d8      	ldr	r0, [r3, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	f002 f907 	bl	8005044 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	425b      	negs	r3, r3
 8002e40:	441a      	add	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d207      	bcs.n	8002e62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	425b      	negs	r3, r3
 8002e5c:	441a      	add	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d105      	bne.n	8002e74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002e7c:	697b      	ldr	r3, [r7, #20]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d018      	beq.n	8002eca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d303      	bcc.n	8002eba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68d9      	ldr	r1, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f002 f8bd 	bl	8005044 <memcpy>
	}
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002eda:	f001 fd4f 	bl	800497c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ee4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ee6:	e011      	b.n	8002f0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d012      	beq.n	8002f16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3324      	adds	r3, #36	@ 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fd7d 	bl	80039f4 <xTaskRemoveFromEventList>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f00:	f000 fe56 	bl	8003bb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	dce9      	bgt.n	8002ee8 <prvUnlockQueue+0x16>
 8002f14:	e000      	b.n	8002f18 <prvUnlockQueue+0x46>
					break;
 8002f16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	22ff      	movs	r2, #255	@ 0xff
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002f20:	f001 fd5c 	bl	80049dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f24:	f001 fd2a 	bl	800497c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f30:	e011      	b.n	8002f56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3310      	adds	r3, #16
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fd58 	bl	80039f4 <xTaskRemoveFromEventList>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f4a:	f000 fe31 	bl	8003bb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	dce9      	bgt.n	8002f32 <prvUnlockQueue+0x60>
 8002f5e:	e000      	b.n	8002f62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	22ff      	movs	r2, #255	@ 0xff
 8002f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002f6a:	f001 fd37 	bl	80049dc <vPortExitCritical>
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f7e:	f001 fcfd 	bl	800497c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e001      	b.n	8002f94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f94:	f001 fd22 	bl	80049dc <vPortExitCritical>

	return xReturn;
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002faa:	f001 fce7 	bl	800497c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d102      	bne.n	8002fc0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e001      	b.n	8002fc4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fc4:	f001 fd0a 	bl	80049dc <vPortExitCritical>

	return xReturn;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e014      	b.n	800300e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8003020 <vQueueAddToRegistry+0x4c>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ff0:	490b      	ldr	r1, [pc, #44]	@ (8003020 <vQueueAddToRegistry+0x4c>)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <vQueueAddToRegistry+0x4c>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003006:	e006      	b.n	8003016 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b07      	cmp	r3, #7
 8003012:	d9e7      	bls.n	8002fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	20000838 	.word	0x20000838

08003024 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e016      	b.n	8003060 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003032:	4a10      	ldr	r2, [pc, #64]	@ (8003074 <vQueueUnregisterQueue+0x50>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d10b      	bne.n	800305a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003042:	4a0c      	ldr	r2, [pc, #48]	@ (8003074 <vQueueUnregisterQueue+0x50>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2100      	movs	r1, #0
 8003048:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800304c:	4a09      	ldr	r2, [pc, #36]	@ (8003074 <vQueueUnregisterQueue+0x50>)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	2200      	movs	r2, #0
 8003056:	605a      	str	r2, [r3, #4]
				break;
 8003058:	e006      	b.n	8003068 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b07      	cmp	r3, #7
 8003064:	d9e5      	bls.n	8003032 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000838 	.word	0x20000838

08003078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003088:	f001 fc78 	bl	800497c <vPortEnterCritical>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003092:	b25b      	sxtb	r3, r3
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d103      	bne.n	80030a2 <vQueueWaitForMessageRestricted+0x2a>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d103      	bne.n	80030b8 <vQueueWaitForMessageRestricted+0x40>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030b8:	f001 fc90 	bl	80049dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3324      	adds	r3, #36	@ 0x24
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fc65 	bl	800399c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff fefd 	bl	8002ed2 <prvUnlockQueue>
	}
 80030d8:	bf00      	nop
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	@ 0x38
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <xTaskCreateStatic+0x2c>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	623b      	str	r3, [r7, #32]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800310c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	61fb      	str	r3, [r7, #28]
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	e7fd      	b.n	8003126 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800312a:	23a8      	movs	r3, #168	@ 0xa8
 800312c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2ba8      	cmp	r3, #168	@ 0xa8
 8003132:	d00b      	beq.n	800314c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	61bb      	str	r3, [r7, #24]
}
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800314c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01e      	beq.n	8003190 <xTaskCreateStatic+0xb0>
 8003152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01b      	beq.n	8003190 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	2202      	movs	r2, #2
 8003166:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800316a:	2300      	movs	r3, #0
 800316c:	9303      	str	r3, [sp, #12]
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	9302      	str	r3, [sp, #8]
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f850 	bl	8003228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003188:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800318a:	f000 f8ed 	bl	8003368 <prvAddNewTaskToReadyList>
 800318e:	e001      	b.n	8003194 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003194:	697b      	ldr	r3, [r7, #20]
	}
 8003196:	4618      	mov	r0, r3
 8003198:	3728      	adds	r7, #40	@ 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08c      	sub	sp, #48	@ 0x30
 80031a2:	af04      	add	r7, sp, #16
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 fce4 	bl	8004b80 <pvPortMalloc>
 80031b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031c0:	20a8      	movs	r0, #168	@ 0xa8
 80031c2:	f001 fcdd 	bl	8004b80 <pvPortMalloc>
 80031c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80031d4:	e005      	b.n	80031e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f001 fd9a 	bl	8004d10 <vPortFree>
 80031dc:	e001      	b.n	80031e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d017      	beq.n	8003218 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	2300      	movs	r3, #0
 80031f4:	9303      	str	r3, [sp, #12]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	9302      	str	r3, [sp, #8]
 80031fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f80e 	bl	8003228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800320c:	69f8      	ldr	r0, [r7, #28]
 800320e:	f000 f8ab 	bl	8003368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003212:	2301      	movs	r3, #1
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	e002      	b.n	800321e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
 800321c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800321e:	69bb      	ldr	r3, [r7, #24]
	}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003238:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	461a      	mov	r2, r3
 8003240:	21a5      	movs	r1, #165	@ 0xa5
 8003242:	f001 fe7b 	bl	8004f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003250:	3b01      	subs	r3, #1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f023 0307 	bic.w	r3, r3, #7
 800325e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	617b      	str	r3, [r7, #20]
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	e012      	b.n	80032ae <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	7819      	ldrb	r1, [r3, #0]
 8003290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	3334      	adds	r3, #52	@ 0x34
 8003298:	460a      	mov	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d9e9      	bls.n	8003288 <prvInitialiseNewTask+0x60>
 80032b4:	e000      	b.n	80032b8 <prvInitialiseNewTask+0x90>
		{
			break;
 80032b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	2b37      	cmp	r3, #55	@ 0x37
 80032c4:	d901      	bls.n	80032ca <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032c6:	2337      	movs	r3, #55	@ 0x37
 80032c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	2200      	movs	r2, #0
 80032da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	3304      	adds	r3, #4
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fe42 	bl	8001f6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e8:	3318      	adds	r3, #24
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe fe3d 	bl	8001f6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80032fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	2200      	movs	r2, #0
 800330a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800330e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003310:	2200      	movs	r2, #0
 8003312:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	3354      	adds	r3, #84	@ 0x54
 800331a:	224c      	movs	r2, #76	@ 0x4c
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fe0c 	bl	8004f3c <memset>
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <prvInitialiseNewTask+0x134>)
 8003328:	659a      	str	r2, [r3, #88]	@ 0x58
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	4a0c      	ldr	r2, [pc, #48]	@ (8003360 <prvInitialiseNewTask+0x138>)
 800332e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <prvInitialiseNewTask+0x13c>)
 8003334:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	68f9      	ldr	r1, [r7, #12]
 800333a:	69b8      	ldr	r0, [r7, #24]
 800333c:	f001 fa30 	bl	80047a0 <pxPortInitialiseStack>
 8003340:	4602      	mov	r2, r0
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003352:	bf00      	nop
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20001ac4 	.word	0x20001ac4
 8003360:	20001b2c 	.word	0x20001b2c
 8003364:	20001b94 	.word	0x20001b94

08003368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003370:	f001 fb04 	bl	800497c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003374:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <prvAddNewTaskToReadyList+0xc4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a2c      	ldr	r2, [pc, #176]	@ (800342c <prvAddNewTaskToReadyList+0xc4>)
 800337c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800337e:	4b2c      	ldr	r3, [pc, #176]	@ (8003430 <prvAddNewTaskToReadyList+0xc8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003386:	4a2a      	ldr	r2, [pc, #168]	@ (8003430 <prvAddNewTaskToReadyList+0xc8>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800338c:	4b27      	ldr	r3, [pc, #156]	@ (800342c <prvAddNewTaskToReadyList+0xc4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d110      	bne.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003394:	f000 fc30 	bl	8003bf8 <prvInitialiseTaskLists>
 8003398:	e00d      	b.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800339a:	4b26      	ldr	r3, [pc, #152]	@ (8003434 <prvAddNewTaskToReadyList+0xcc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033a2:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <prvAddNewTaskToReadyList+0xc8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d802      	bhi.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003430 <prvAddNewTaskToReadyList+0xc8>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033b6:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <prvAddNewTaskToReadyList+0xd0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003438 <prvAddNewTaskToReadyList+0xd0>)
 80033be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <prvAddNewTaskToReadyList+0xd0>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033cc:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <prvAddNewTaskToReadyList+0xd4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d903      	bls.n	80033dc <prvAddNewTaskToReadyList+0x74>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	4a18      	ldr	r2, [pc, #96]	@ (800343c <prvAddNewTaskToReadyList+0xd4>)
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4a15      	ldr	r2, [pc, #84]	@ (8003440 <prvAddNewTaskToReadyList+0xd8>)
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7fe fdc5 	bl	8001f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033f8:	f001 faf0 	bl	80049dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <prvAddNewTaskToReadyList+0xcc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003404:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <prvAddNewTaskToReadyList+0xc8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	429a      	cmp	r2, r3
 8003410:	d207      	bcs.n	8003422 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <prvAddNewTaskToReadyList+0xdc>)
 8003414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000d4c 	.word	0x20000d4c
 8003430:	20000878 	.word	0x20000878
 8003434:	20000d58 	.word	0x20000d58
 8003438:	20000d68 	.word	0x20000d68
 800343c:	20000d54 	.word	0x20000d54
 8003440:	2000087c 	.word	0x2000087c
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d018      	beq.n	800348c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800345a:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <vTaskDelay+0x64>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <vTaskDelay+0x32>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	60bb      	str	r3, [r7, #8]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800347a:	f000 f88b 	bl	8003594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800347e:	2100      	movs	r1, #0
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fe19 	bl	80040b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003486:	f000 f893 	bl	80035b0 <xTaskResumeAll>
 800348a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d107      	bne.n	80034a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <vTaskDelay+0x68>)
 8003494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000d74 	.word	0x20000d74
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	@ 0x28
 80034b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034c2:	463a      	mov	r2, r7
 80034c4:	1d39      	adds	r1, r7, #4
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fcfc 	bl	8001ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	9202      	str	r2, [sp, #8]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	460a      	mov	r2, r1
 80034e2:	4924      	ldr	r1, [pc, #144]	@ (8003574 <vTaskStartScheduler+0xc0>)
 80034e4:	4824      	ldr	r0, [pc, #144]	@ (8003578 <vTaskStartScheduler+0xc4>)
 80034e6:	f7ff fdfb 	bl	80030e0 <xTaskCreateStatic>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a23      	ldr	r2, [pc, #140]	@ (800357c <vTaskStartScheduler+0xc8>)
 80034ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034f0:	4b22      	ldr	r3, [pc, #136]	@ (800357c <vTaskStartScheduler+0xc8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e001      	b.n	8003502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003508:	f000 fe2a 	bl	8004160 <xTimerCreateTimerTask>
 800350c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d11b      	bne.n	800354c <vTaskStartScheduler+0x98>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	613b      	str	r3, [r7, #16]
}
 8003526:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003528:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <vTaskStartScheduler+0xcc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3354      	adds	r3, #84	@ 0x54
 800352e:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <vTaskStartScheduler+0xd0>)
 8003530:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <vTaskStartScheduler+0xd4>)
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <vTaskStartScheduler+0xd8>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <vTaskStartScheduler+0xdc>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003546:	f001 f9a7 	bl	8004898 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800354a:	e00f      	b.n	800356c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d10b      	bne.n	800356c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60fb      	str	r3, [r7, #12]
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <vTaskStartScheduler+0xb4>
}
 800356c:	bf00      	nop
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	08005168 	.word	0x08005168
 8003578:	08003bc9 	.word	0x08003bc9
 800357c:	20000d70 	.word	0x20000d70
 8003580:	20000878 	.word	0x20000878
 8003584:	20000014 	.word	0x20000014
 8003588:	20000d6c 	.word	0x20000d6c
 800358c:	20000d58 	.word	0x20000d58
 8003590:	20000d50 	.word	0x20000d50

08003594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <vTaskSuspendAll+0x18>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	4a03      	ldr	r2, [pc, #12]	@ (80035ac <vTaskSuspendAll+0x18>)
 80035a0:	6013      	str	r3, [r2, #0]
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000d74 	.word	0x20000d74

080035b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035be:	4b42      	ldr	r3, [pc, #264]	@ (80036c8 <xTaskResumeAll+0x118>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <xTaskResumeAll+0x2e>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	603b      	str	r3, [r7, #0]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035de:	f001 f9cd 	bl	800497c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035e2:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <xTaskResumeAll+0x118>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	4a37      	ldr	r2, [pc, #220]	@ (80036c8 <xTaskResumeAll+0x118>)
 80035ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ec:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <xTaskResumeAll+0x118>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d162      	bne.n	80036ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035f4:	4b35      	ldr	r3, [pc, #212]	@ (80036cc <xTaskResumeAll+0x11c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05e      	beq.n	80036ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035fc:	e02f      	b.n	800365e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035fe:	4b34      	ldr	r3, [pc, #208]	@ (80036d0 <xTaskResumeAll+0x120>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3318      	adds	r3, #24
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fd14 	bl	8002038 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3304      	adds	r3, #4
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe fd0f 	bl	8002038 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361e:	4b2d      	ldr	r3, [pc, #180]	@ (80036d4 <xTaskResumeAll+0x124>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d903      	bls.n	800362e <xTaskResumeAll+0x7e>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <xTaskResumeAll+0x124>)
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4a27      	ldr	r2, [pc, #156]	@ (80036d8 <xTaskResumeAll+0x128>)
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3304      	adds	r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f7fe fc9c 	bl	8001f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364e:	4b23      	ldr	r3, [pc, #140]	@ (80036dc <xTaskResumeAll+0x12c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003658:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <xTaskResumeAll+0x130>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800365e:	4b1c      	ldr	r3, [pc, #112]	@ (80036d0 <xTaskResumeAll+0x120>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1cb      	bne.n	80035fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800366c:	f000 fb68 	bl	8003d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003670:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <xTaskResumeAll+0x134>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800367c:	f000 f844 	bl	8003708 <xTaskIncrementTick>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003686:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <xTaskResumeAll+0x130>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f1      	bne.n	800367c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003698:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <xTaskResumeAll+0x134>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800369e:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <xTaskResumeAll+0x130>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036aa:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <xTaskResumeAll+0x138>)
 80036ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036ba:	f001 f98f 	bl	80049dc <vPortExitCritical>

	return xAlreadyYielded;
 80036be:	68bb      	ldr	r3, [r7, #8]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000d74 	.word	0x20000d74
 80036cc:	20000d4c 	.word	0x20000d4c
 80036d0:	20000d0c 	.word	0x20000d0c
 80036d4:	20000d54 	.word	0x20000d54
 80036d8:	2000087c 	.word	0x2000087c
 80036dc:	20000878 	.word	0x20000878
 80036e0:	20000d60 	.word	0x20000d60
 80036e4:	20000d5c 	.word	0x20000d5c
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036f2:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <xTaskGetTickCount+0x18>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036f8:	687b      	ldr	r3, [r7, #4]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	20000d50 	.word	0x20000d50

08003708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003712:	4b52      	ldr	r3, [pc, #328]	@ (800385c <xTaskIncrementTick+0x154>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 808f 	bne.w	800383a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800371c:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <xTaskIncrementTick+0x158>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003724:	4a4e      	ldr	r2, [pc, #312]	@ (8003860 <xTaskIncrementTick+0x158>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d121      	bne.n	8003774 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003730:	4b4c      	ldr	r3, [pc, #304]	@ (8003864 <xTaskIncrementTick+0x15c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <xTaskIncrementTick+0x4a>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	603b      	str	r3, [r7, #0]
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	e7fd      	b.n	800374e <xTaskIncrementTick+0x46>
 8003752:	4b44      	ldr	r3, [pc, #272]	@ (8003864 <xTaskIncrementTick+0x15c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	4b43      	ldr	r3, [pc, #268]	@ (8003868 <xTaskIncrementTick+0x160>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a41      	ldr	r2, [pc, #260]	@ (8003864 <xTaskIncrementTick+0x15c>)
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4a41      	ldr	r2, [pc, #260]	@ (8003868 <xTaskIncrementTick+0x160>)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b41      	ldr	r3, [pc, #260]	@ (800386c <xTaskIncrementTick+0x164>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a3f      	ldr	r2, [pc, #252]	@ (800386c <xTaskIncrementTick+0x164>)
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	f000 fae6 	bl	8003d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003774:	4b3e      	ldr	r3, [pc, #248]	@ (8003870 <xTaskIncrementTick+0x168>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	d34e      	bcc.n	800381c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800377e:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <xTaskIncrementTick+0x15c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <xTaskIncrementTick+0x84>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <xTaskIncrementTick+0x86>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003792:	4b37      	ldr	r3, [pc, #220]	@ (8003870 <xTaskIncrementTick+0x168>)
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	601a      	str	r2, [r3, #0]
					break;
 800379a:	e03f      	b.n	800381c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800379c:	4b31      	ldr	r3, [pc, #196]	@ (8003864 <xTaskIncrementTick+0x15c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d203      	bcs.n	80037bc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003870 <xTaskIncrementTick+0x168>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6013      	str	r3, [r2, #0]
						break;
 80037ba:	e02f      	b.n	800381c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	3304      	adds	r3, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fc39 	bl	8002038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3318      	adds	r3, #24
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fc30 	bl	8002038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037dc:	4b25      	ldr	r3, [pc, #148]	@ (8003874 <xTaskIncrementTick+0x16c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d903      	bls.n	80037ec <xTaskIncrementTick+0xe4>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	4a22      	ldr	r2, [pc, #136]	@ (8003874 <xTaskIncrementTick+0x16c>)
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003878 <xTaskIncrementTick+0x170>)
 80037fa:	441a      	add	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3304      	adds	r3, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f7fe fbbd 	bl	8001f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380c:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <xTaskIncrementTick+0x174>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003812:	429a      	cmp	r2, r3
 8003814:	d3b3      	bcc.n	800377e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003816:	2301      	movs	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381a:	e7b0      	b.n	800377e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800381c:	4b17      	ldr	r3, [pc, #92]	@ (800387c <xTaskIncrementTick+0x174>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003822:	4915      	ldr	r1, [pc, #84]	@ (8003878 <xTaskIncrementTick+0x170>)
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d907      	bls.n	8003844 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e004      	b.n	8003844 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <xTaskIncrementTick+0x178>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	4a0f      	ldr	r2, [pc, #60]	@ (8003880 <xTaskIncrementTick+0x178>)
 8003842:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003844:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <xTaskIncrementTick+0x17c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003850:	697b      	ldr	r3, [r7, #20]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000d74 	.word	0x20000d74
 8003860:	20000d50 	.word	0x20000d50
 8003864:	20000d04 	.word	0x20000d04
 8003868:	20000d08 	.word	0x20000d08
 800386c:	20000d64 	.word	0x20000d64
 8003870:	20000d6c 	.word	0x20000d6c
 8003874:	20000d54 	.word	0x20000d54
 8003878:	2000087c 	.word	0x2000087c
 800387c:	20000878 	.word	0x20000878
 8003880:	20000d5c 	.word	0x20000d5c
 8003884:	20000d60 	.word	0x20000d60

08003888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800388e:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <vTaskSwitchContext+0xb0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003896:	4b29      	ldr	r3, [pc, #164]	@ (800393c <vTaskSwitchContext+0xb4>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800389c:	e047      	b.n	800392e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800389e:	4b27      	ldr	r3, [pc, #156]	@ (800393c <vTaskSwitchContext+0xb4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038a4:	4b26      	ldr	r3, [pc, #152]	@ (8003940 <vTaskSwitchContext+0xb8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e011      	b.n	80038d0 <vTaskSwitchContext+0x48>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <vTaskSwitchContext+0x42>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	607b      	str	r3, [r7, #4]
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	e7fd      	b.n	80038c6 <vTaskSwitchContext+0x3e>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	491c      	ldr	r1, [pc, #112]	@ (8003944 <vTaskSwitchContext+0xbc>)
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0e3      	beq.n	80038ac <vTaskSwitchContext+0x24>
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4a15      	ldr	r2, [pc, #84]	@ (8003944 <vTaskSwitchContext+0xbc>)
 80038f0:	4413      	add	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	3308      	adds	r3, #8
 8003906:	429a      	cmp	r2, r3
 8003908:	d104      	bne.n	8003914 <vTaskSwitchContext+0x8c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <vTaskSwitchContext+0xc0>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <vTaskSwitchContext+0xb8>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003924:	4b08      	ldr	r3, [pc, #32]	@ (8003948 <vTaskSwitchContext+0xc0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3354      	adds	r3, #84	@ 0x54
 800392a:	4a08      	ldr	r2, [pc, #32]	@ (800394c <vTaskSwitchContext+0xc4>)
 800392c:	6013      	str	r3, [r2, #0]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	20000d74 	.word	0x20000d74
 800393c:	20000d60 	.word	0x20000d60
 8003940:	20000d54 	.word	0x20000d54
 8003944:	2000087c 	.word	0x2000087c
 8003948:	20000878 	.word	0x20000878
 800394c:	20000014 	.word	0x20000014

08003950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	60fb      	str	r3, [r7, #12]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003978:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <vTaskPlaceOnEventList+0x48>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3318      	adds	r3, #24
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fe fb21 	bl	8001fc8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003986:	2101      	movs	r1, #1
 8003988:	6838      	ldr	r0, [r7, #0]
 800398a:	f000 fb95 	bl	80040b8 <prvAddCurrentTaskToDelayedList>
}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000878 	.word	0x20000878

0800399c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	617b      	str	r3, [r7, #20]
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039c6:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3318      	adds	r3, #24
 80039cc:	4619      	mov	r1, r3
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f7fe fad7 	bl	8001f82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f000 fb68 	bl	80040b8 <prvAddCurrentTaskToDelayedList>
	}
 80039e8:	bf00      	nop
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000878 	.word	0x20000878

080039f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	60fb      	str	r3, [r7, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	3318      	adds	r3, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fb06 	bl	8002038 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <xTaskRemoveFromEventList+0xb0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d11d      	bne.n	8003a70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fafd 	bl	8002038 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a42:	4b19      	ldr	r3, [pc, #100]	@ (8003aa8 <xTaskRemoveFromEventList+0xb4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d903      	bls.n	8003a52 <xTaskRemoveFromEventList+0x5e>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <xTaskRemoveFromEventList+0xb4>)
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4a13      	ldr	r2, [pc, #76]	@ (8003aac <xTaskRemoveFromEventList+0xb8>)
 8003a60:	441a      	add	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7fe fa8a 	bl	8001f82 <vListInsertEnd>
 8003a6e:	e005      	b.n	8003a7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3318      	adds	r3, #24
 8003a74:	4619      	mov	r1, r3
 8003a76:	480e      	ldr	r0, [pc, #56]	@ (8003ab0 <xTaskRemoveFromEventList+0xbc>)
 8003a78:	f7fe fa83 	bl	8001f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a80:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <xTaskRemoveFromEventList+0xc0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d905      	bls.n	8003a96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <xTaskRemoveFromEventList+0xc4>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e001      	b.n	8003a9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a9a:	697b      	ldr	r3, [r7, #20]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000d74 	.word	0x20000d74
 8003aa8:	20000d54 	.word	0x20000d54
 8003aac:	2000087c 	.word	0x2000087c
 8003ab0:	20000d0c 	.word	0x20000d0c
 8003ab4:	20000878 	.word	0x20000878
 8003ab8:	20000d60 	.word	0x20000d60

08003abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <vTaskInternalSetTimeOutState+0x24>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <vTaskInternalSetTimeOutState+0x28>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	605a      	str	r2, [r3, #4]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000d64 	.word	0x20000d64
 8003ae4:	20000d50 	.word	0x20000d50

08003ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	613b      	str	r3, [r7, #16]
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	60fb      	str	r3, [r7, #12]
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b2e:	f000 ff25 	bl	800497c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba8 <xTaskCheckForTimeOut+0xc0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d102      	bne.n	8003b52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	e023      	b.n	8003b9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <xTaskCheckForTimeOut+0xc4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d007      	beq.n	8003b6e <xTaskCheckForTimeOut+0x86>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	e015      	b.n	8003b9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d20b      	bcs.n	8003b90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff99 	bl	8003abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e004      	b.n	8003b9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b9a:	f000 ff1f 	bl	80049dc <vPortExitCritical>

	return xReturn;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000d50 	.word	0x20000d50
 8003bac:	20000d64 	.word	0x20000d64

08003bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	@ (8003bc4 <vTaskMissedYield+0x14>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000d60 	.word	0x20000d60

08003bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bd0:	f000 f852 	bl	8003c78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <prvIdleTask+0x28>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d9f9      	bls.n	8003bd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <prvIdleTask+0x2c>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bec:	e7f0      	b.n	8003bd0 <prvIdleTask+0x8>
 8003bee:	bf00      	nop
 8003bf0:	2000087c 	.word	0x2000087c
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	e00c      	b.n	8003c1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4a12      	ldr	r2, [pc, #72]	@ (8003c58 <prvInitialiseTaskLists+0x60>)
 8003c10:	4413      	add	r3, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f98a 	bl	8001f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b37      	cmp	r3, #55	@ 0x37
 8003c22:	d9ef      	bls.n	8003c04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c24:	480d      	ldr	r0, [pc, #52]	@ (8003c5c <prvInitialiseTaskLists+0x64>)
 8003c26:	f7fe f981 	bl	8001f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c2a:	480d      	ldr	r0, [pc, #52]	@ (8003c60 <prvInitialiseTaskLists+0x68>)
 8003c2c:	f7fe f97e 	bl	8001f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c30:	480c      	ldr	r0, [pc, #48]	@ (8003c64 <prvInitialiseTaskLists+0x6c>)
 8003c32:	f7fe f97b 	bl	8001f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c36:	480c      	ldr	r0, [pc, #48]	@ (8003c68 <prvInitialiseTaskLists+0x70>)
 8003c38:	f7fe f978 	bl	8001f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c3c:	480b      	ldr	r0, [pc, #44]	@ (8003c6c <prvInitialiseTaskLists+0x74>)
 8003c3e:	f7fe f975 	bl	8001f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <prvInitialiseTaskLists+0x78>)
 8003c44:	4a05      	ldr	r2, [pc, #20]	@ (8003c5c <prvInitialiseTaskLists+0x64>)
 8003c46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <prvInitialiseTaskLists+0x7c>)
 8003c4a:	4a05      	ldr	r2, [pc, #20]	@ (8003c60 <prvInitialiseTaskLists+0x68>)
 8003c4c:	601a      	str	r2, [r3, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000087c 	.word	0x2000087c
 8003c5c:	20000cdc 	.word	0x20000cdc
 8003c60:	20000cf0 	.word	0x20000cf0
 8003c64:	20000d0c 	.word	0x20000d0c
 8003c68:	20000d20 	.word	0x20000d20
 8003c6c:	20000d38 	.word	0x20000d38
 8003c70:	20000d04 	.word	0x20000d04
 8003c74:	20000d08 	.word	0x20000d08

08003c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c7e:	e019      	b.n	8003cb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c80:	f000 fe7c 	bl	800497c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c84:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <prvCheckTasksWaitingTermination+0x50>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe f9d1 	bl	8002038 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <prvCheckTasksWaitingTermination+0x54>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003ccc <prvCheckTasksWaitingTermination+0x54>)
 8003c9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ca8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003caa:	f000 fe97 	bl	80049dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f810 	bl	8003cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cb4:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e1      	bne.n	8003c80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000d20 	.word	0x20000d20
 8003ccc:	20000d4c 	.word	0x20000d4c
 8003cd0:	20000d34 	.word	0x20000d34

08003cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3354      	adds	r3, #84	@ 0x54
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 f933 	bl	8004f4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d108      	bne.n	8003d02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 f80b 	bl	8004d10 <vPortFree>
				vPortFree( pxTCB );
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f001 f808 	bl	8004d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d00:	e019      	b.n	8003d36 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d103      	bne.n	8003d14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 ffff 	bl	8004d10 <vPortFree>
	}
 8003d12:	e010      	b.n	8003d36 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d00b      	beq.n	8003d36 <prvDeleteTCB+0x62>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60fb      	str	r3, [r7, #12]
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	e7fd      	b.n	8003d32 <prvDeleteTCB+0x5e>
	}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d46:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <prvResetNextTaskUnblockTime+0x40>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <prvResetNextTaskUnblockTime+0x14>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <prvResetNextTaskUnblockTime+0x16>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <prvResetNextTaskUnblockTime+0x44>)
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d62:	e008      	b.n	8003d76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <prvResetNextTaskUnblockTime+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <prvResetNextTaskUnblockTime+0x44>)
 8003d74:	6013      	str	r3, [r2, #0]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	20000d04 	.word	0x20000d04
 8003d84:	20000d6c 	.word	0x20000d6c

08003d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <xTaskGetSchedulerState+0x34>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d96:	2301      	movs	r3, #1
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	e008      	b.n	8003dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9c:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <xTaskGetSchedulerState+0x38>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003da4:	2302      	movs	r3, #2
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	e001      	b.n	8003dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dae:	687b      	ldr	r3, [r7, #4]
	}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000d58 	.word	0x20000d58
 8003dc0:	20000d74 	.word	0x20000d74

08003dc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d056      	beq.n	8003e88 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dde:	4b2d      	ldr	r3, [pc, #180]	@ (8003e94 <xTaskPriorityInherit+0xd0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d246      	bcs.n	8003e76 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db06      	blt.n	8003dfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df0:	4b28      	ldr	r3, [pc, #160]	@ (8003e94 <xTaskPriorityInherit+0xd0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6959      	ldr	r1, [r3, #20]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <xTaskPriorityInherit+0xd4>)
 8003e10:	4413      	add	r3, r2
 8003e12:	4299      	cmp	r1, r3
 8003e14:	d101      	bne.n	8003e1a <xTaskPriorityInherit+0x56>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <xTaskPriorityInherit+0x58>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d022      	beq.n	8003e66 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe f907 	bl	8002038 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <xTaskPriorityInherit+0xd0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e38:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <xTaskPriorityInherit+0xd8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d903      	bls.n	8003e48 <xTaskPriorityInherit+0x84>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	4a15      	ldr	r2, [pc, #84]	@ (8003e9c <xTaskPriorityInherit+0xd8>)
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4a10      	ldr	r2, [pc, #64]	@ (8003e98 <xTaskPriorityInherit+0xd4>)
 8003e56:	441a      	add	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7fe f88f 	bl	8001f82 <vListInsertEnd>
 8003e64:	e004      	b.n	8003e70 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <xTaskPriorityInherit+0xd0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e008      	b.n	8003e88 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <xTaskPriorityInherit+0xd0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d201      	bcs.n	8003e88 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e88:	68fb      	ldr	r3, [r7, #12]
	}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000878 	.word	0x20000878
 8003e98:	2000087c 	.word	0x2000087c
 8003e9c:	20000d54 	.word	0x20000d54

08003ea0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d058      	beq.n	8003f68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f74 <xTaskPriorityDisinherit+0xd4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d00b      	beq.n	8003ed8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	60fb      	str	r3, [r7, #12]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60bb      	str	r3, [r7, #8]
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d02c      	beq.n	8003f68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d128      	bne.n	8003f68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe f88c 	bl	8002038 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f38:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <xTaskPriorityDisinherit+0xd8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d903      	bls.n	8003f48 <xTaskPriorityDisinherit+0xa8>
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <xTaskPriorityDisinherit+0xd8>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4a09      	ldr	r2, [pc, #36]	@ (8003f7c <xTaskPriorityDisinherit+0xdc>)
 8003f56:	441a      	add	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fe f80f 	bl	8001f82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f68:	697b      	ldr	r3, [r7, #20]
	}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000878 	.word	0x20000878
 8003f78:	20000d54 	.word	0x20000d54
 8003f7c:	2000087c 	.word	0x2000087c

08003f80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d071      	beq.n	800407c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	60fb      	str	r3, [r7, #12]
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	e7fd      	b.n	8003fb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d902      	bls.n	8003fc8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e002      	b.n	8003fce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fcc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d051      	beq.n	800407c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d14c      	bne.n	800407c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003fe2:	4b28      	ldr	r3, [pc, #160]	@ (8004084 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d10b      	bne.n	8004004 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	60bb      	str	r3, [r7, #8]
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db04      	blt.n	8004022 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	6959      	ldr	r1, [r3, #20]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004032:	4413      	add	r3, r2
 8004034:	4299      	cmp	r1, r3
 8004036:	d101      	bne.n	800403c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800403c:	2300      	movs	r3, #0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01c      	beq.n	800407c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3304      	adds	r3, #4
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd fff6 	bl	8002038 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	4b0e      	ldr	r3, [pc, #56]	@ (800408c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d903      	bls.n	8004060 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	4a0b      	ldr	r2, [pc, #44]	@ (800408c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4a06      	ldr	r2, [pc, #24]	@ (8004088 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800406e:	441a      	add	r2, r3
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f7fd ff83 	bl	8001f82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800407c:	bf00      	nop
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000878 	.word	0x20000878
 8004088:	2000087c 	.word	0x2000087c
 800408c:	20000d54 	.word	0x20000d54

08004090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004094:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800409c:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040a2:	3201      	adds	r2, #1
 80040a4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80040a6:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80040a8:	681b      	ldr	r3, [r3, #0]
	}
 80040aa:	4618      	mov	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000878 	.word	0x20000878

080040b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040c2:	4b21      	ldr	r3, [pc, #132]	@ (8004148 <prvAddCurrentTaskToDelayedList+0x90>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040c8:	4b20      	ldr	r3, [pc, #128]	@ (800414c <prvAddCurrentTaskToDelayedList+0x94>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fd ffb2 	bl	8002038 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d10a      	bne.n	80040f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040e2:	4b1a      	ldr	r3, [pc, #104]	@ (800414c <prvAddCurrentTaskToDelayedList+0x94>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4819      	ldr	r0, [pc, #100]	@ (8004150 <prvAddCurrentTaskToDelayedList+0x98>)
 80040ec:	f7fd ff49 	bl	8001f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040f0:	e026      	b.n	8004140 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040fa:	4b14      	ldr	r3, [pc, #80]	@ (800414c <prvAddCurrentTaskToDelayedList+0x94>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	429a      	cmp	r2, r3
 8004108:	d209      	bcs.n	800411e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800410a:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <prvAddCurrentTaskToDelayedList+0x9c>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <prvAddCurrentTaskToDelayedList+0x94>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fd ff56 	bl	8001fc8 <vListInsert>
}
 800411c:	e010      	b.n	8004140 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800411e:	4b0e      	ldr	r3, [pc, #56]	@ (8004158 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <prvAddCurrentTaskToDelayedList+0x94>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f7fd ff4c 	bl	8001fc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004130:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	d202      	bcs.n	8004140 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800413a:	4a08      	ldr	r2, [pc, #32]	@ (800415c <prvAddCurrentTaskToDelayedList+0xa4>)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000d50 	.word	0x20000d50
 800414c:	20000878 	.word	0x20000878
 8004150:	20000d38 	.word	0x20000d38
 8004154:	20000d08 	.word	0x20000d08
 8004158:	20000d04 	.word	0x20000d04
 800415c:	20000d6c 	.word	0x20000d6c

08004160 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	@ 0x28
 8004164:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800416a:	f000 fad9 	bl	8004720 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800416e:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <xTimerCreateTimerTask+0x84>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d021      	beq.n	80041ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800417e:	1d3a      	adds	r2, r7, #4
 8004180:	f107 0108 	add.w	r1, r7, #8
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	4618      	mov	r0, r3
 800418a:	f7fd feb5 	bl	8001ef8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	9202      	str	r2, [sp, #8]
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	2302      	movs	r3, #2
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2300      	movs	r3, #0
 800419e:	460a      	mov	r2, r1
 80041a0:	4911      	ldr	r1, [pc, #68]	@ (80041e8 <xTimerCreateTimerTask+0x88>)
 80041a2:	4812      	ldr	r0, [pc, #72]	@ (80041ec <xTimerCreateTimerTask+0x8c>)
 80041a4:	f7fe ff9c 	bl	80030e0 <xTaskCreateStatic>
 80041a8:	4603      	mov	r3, r0
 80041aa:	4a11      	ldr	r2, [pc, #68]	@ (80041f0 <xTimerCreateTimerTask+0x90>)
 80041ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041ae:	4b10      	ldr	r3, [pc, #64]	@ (80041f0 <xTimerCreateTimerTask+0x90>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041b6:	2301      	movs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80041d8:	697b      	ldr	r3, [r7, #20]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000da8 	.word	0x20000da8
 80041e8:	08005170 	.word	0x08005170
 80041ec:	08004315 	.word	0x08004315
 80041f0:	20000dac 	.word	0x20000dac

080041f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	@ 0x28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004202:	2300      	movs	r3, #0
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <xTimerGenericCommand+0x30>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	623b      	str	r3, [r7, #32]
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004224:	4b19      	ldr	r3, [pc, #100]	@ (800428c <xTimerGenericCommand+0x98>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02a      	beq.n	8004282 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	dc18      	bgt.n	8004270 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800423e:	f7ff fda3 	bl	8003d88 <xTaskGetSchedulerState>
 8004242:	4603      	mov	r3, r0
 8004244:	2b02      	cmp	r3, #2
 8004246:	d109      	bne.n	800425c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004248:	4b10      	ldr	r3, [pc, #64]	@ (800428c <xTimerGenericCommand+0x98>)
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	f107 0110 	add.w	r1, r7, #16
 8004250:	2300      	movs	r3, #0
 8004252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004254:	f7fe f8d0 	bl	80023f8 <xQueueGenericSend>
 8004258:	6278      	str	r0, [r7, #36]	@ 0x24
 800425a:	e012      	b.n	8004282 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <xTimerGenericCommand+0x98>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	f107 0110 	add.w	r1, r7, #16
 8004264:	2300      	movs	r3, #0
 8004266:	2200      	movs	r2, #0
 8004268:	f7fe f8c6 	bl	80023f8 <xQueueGenericSend>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24
 800426e:	e008      	b.n	8004282 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004270:	4b06      	ldr	r3, [pc, #24]	@ (800428c <xTimerGenericCommand+0x98>)
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	f107 0110 	add.w	r1, r7, #16
 8004278:	2300      	movs	r3, #0
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	f7fe f9be 	bl	80025fc <xQueueGenericSendFromISR>
 8004280:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004284:	4618      	mov	r0, r3
 8004286:	3728      	adds	r7, #40	@ 0x28
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000da8 	.word	0x20000da8

08004290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800429a:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <prvProcessExpiredTimer+0x80>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd fec5 	bl	8002038 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d123      	bne.n	80042fe <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	18d1      	adds	r1, r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	6978      	ldr	r0, [r7, #20]
 80042c4:	f000 f8cc 	bl	8004460 <prvInsertTimerInActiveList>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d017      	beq.n	80042fe <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	2100      	movs	r1, #0
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f7ff ff8b 	bl	80041f4 <xTimerGenericCommand>
 80042de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60fb      	str	r3, [r7, #12]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	4798      	blx	r3
}
 8004306:	bf00      	nop
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000da0 	.word	0x20000da0

08004314 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800431c:	f107 0308 	add.w	r3, r7, #8
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f859 	bl	80043d8 <prvGetNextExpireTime>
 8004326:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4619      	mov	r1, r3
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f805 	bl	800433c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004332:	f000 f8d7 	bl	80044e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004336:	bf00      	nop
 8004338:	e7f0      	b.n	800431c <prvTimerTask+0x8>
	...

0800433c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004346:	f7ff f925 	bl	8003594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f866 	bl	8004420 <prvSampleTimeNow>
 8004354:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d130      	bne.n	80043be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <prvProcessTimerOrBlockTask+0x3c>
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	429a      	cmp	r2, r3
 8004368:	d806      	bhi.n	8004378 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800436a:	f7ff f921 	bl	80035b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff8d 	bl	8004290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004376:	e024      	b.n	80043c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800437e:	4b13      	ldr	r3, [pc, #76]	@ (80043cc <prvProcessTimerOrBlockTask+0x90>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004390:	4b0f      	ldr	r3, [pc, #60]	@ (80043d0 <prvProcessTimerOrBlockTask+0x94>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	4619      	mov	r1, r3
 800439e:	f7fe fe6b 	bl	8003078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043a2:	f7ff f905 	bl	80035b0 <xTaskResumeAll>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043ac:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <prvProcessTimerOrBlockTask+0x98>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
}
 80043bc:	e001      	b.n	80043c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043be:	f7ff f8f7 	bl	80035b0 <xTaskResumeAll>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000da4 	.word	0x20000da4
 80043d0:	20000da8 	.word	0x20000da8
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043e0:	4b0e      	ldr	r3, [pc, #56]	@ (800441c <prvGetNextExpireTime+0x44>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043fe:	4b07      	ldr	r3, [pc, #28]	@ (800441c <prvGetNextExpireTime+0x44>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e001      	b.n	800440e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000da0 	.word	0x20000da0

08004420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004428:	f7ff f960 	bl	80036ec <xTaskGetTickCount>
 800442c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800442e:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <prvSampleTimeNow+0x3c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d205      	bcs.n	8004444 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004438:	f000 f910 	bl	800465c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e002      	b.n	800444a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800444a:	4a04      	ldr	r2, [pc, #16]	@ (800445c <prvSampleTimeNow+0x3c>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000db0 	.word	0x20000db0

08004460 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d812      	bhi.n	80044ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e01b      	b.n	80044d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800449a:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <prvInsertTimerInActiveList+0x7c>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fd fd8f 	bl	8001fc8 <vListInsert>
 80044aa:	e012      	b.n	80044d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d206      	bcs.n	80044c2 <prvInsertTimerInActiveList+0x62>
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	e007      	b.n	80044d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044c2:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <prvInsertTimerInActiveList+0x80>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fd fd7b 	bl	8001fc8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000da4 	.word	0x20000da4
 80044e0:	20000da0 	.word	0x20000da0

080044e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08e      	sub	sp, #56	@ 0x38
 80044e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ea:	e0a5      	b.n	8004638 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da19      	bge.n	8004526 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	3304      	adds	r3, #4
 80044f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	61fb      	str	r3, [r7, #28]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800451c:	6850      	ldr	r0, [r2, #4]
 800451e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004520:	6892      	ldr	r2, [r2, #8]
 8004522:	4611      	mov	r1, r2
 8004524:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f2c0 8085 	blt.w	8004638 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd fd7a 	bl	8002038 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004544:	463b      	mov	r3, r7
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ff6a 	bl	8004420 <prvSampleTimeNow>
 800454c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b09      	cmp	r3, #9
 8004552:	d86c      	bhi.n	800462e <prvProcessReceivedCommands+0x14a>
 8004554:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <prvProcessReceivedCommands+0x78>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	08004585 	.word	0x08004585
 8004560:	08004585 	.word	0x08004585
 8004564:	08004585 	.word	0x08004585
 8004568:	0800462f 	.word	0x0800462f
 800456c:	080045e3 	.word	0x080045e3
 8004570:	0800461d 	.word	0x0800461d
 8004574:	08004585 	.word	0x08004585
 8004578:	08004585 	.word	0x08004585
 800457c:	0800462f 	.word	0x0800462f
 8004580:	080045e3 	.word	0x080045e3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	18d1      	adds	r1, r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004592:	f7ff ff65 	bl	8004460 <prvInsertTimerInActiveList>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d04a      	beq.n	8004632 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d142      	bne.n	8004632 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	441a      	add	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	2100      	movs	r1, #0
 80045bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045be:	f7ff fe19 	bl	80041f4 <xTimerGenericCommand>
 80045c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d133      	bne.n	8004632 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	61bb      	str	r3, [r7, #24]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	617b      	str	r3, [r7, #20]
}
 8004602:	bf00      	nop
 8004604:	bf00      	nop
 8004606:	e7fd      	b.n	8004604 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	18d1      	adds	r1, r2, r3
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004616:	f7ff ff23 	bl	8004460 <prvInsertTimerInActiveList>
					break;
 800461a:	e00d      	b.n	8004638 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004628:	f000 fb72 	bl	8004d10 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800462c:	e003      	b.n	8004636 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <prvProcessReceivedCommands+0x154>
					break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <prvProcessReceivedCommands+0x154>
					break;
 8004636:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004638:	4b07      	ldr	r3, [pc, #28]	@ (8004658 <prvProcessReceivedCommands+0x174>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1d39      	adds	r1, r7, #4
 800463e:	2200      	movs	r2, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe f907 	bl	8002854 <xQueueReceive>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f af4f 	bne.w	80044ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	3730      	adds	r7, #48	@ 0x30
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000da8 	.word	0x20000da8

0800465c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004662:	e046      	b.n	80046f2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004664:	4b2c      	ldr	r3, [pc, #176]	@ (8004718 <prvSwitchTimerLists+0xbc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800466e:	4b2a      	ldr	r3, [pc, #168]	@ (8004718 <prvSwitchTimerLists+0xbc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fcdb 	bl	8002038 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d12f      	bne.n	80046f2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d90e      	bls.n	80046c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046b0:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <prvSwitchTimerLists+0xbc>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fd fc84 	bl	8001fc8 <vListInsert>
 80046c0:	e017      	b.n	80046f2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	2100      	movs	r1, #0
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fd91 	bl	80041f4 <xTimerGenericCommand>
 80046d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <prvSwitchTimerLists+0x96>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	e7fd      	b.n	80046ee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <prvSwitchTimerLists+0xbc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1b3      	bne.n	8004664 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <prvSwitchTimerLists+0xbc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <prvSwitchTimerLists+0xc0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a04      	ldr	r2, [pc, #16]	@ (8004718 <prvSwitchTimerLists+0xbc>)
 8004708:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800470a:	4a04      	ldr	r2, [pc, #16]	@ (800471c <prvSwitchTimerLists+0xc0>)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000da0 	.word	0x20000da0
 800471c:	20000da4 	.word	0x20000da4

08004720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004726:	f000 f929 	bl	800497c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <prvCheckForValidListAndQueue+0x60>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d120      	bne.n	8004774 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004732:	4814      	ldr	r0, [pc, #80]	@ (8004784 <prvCheckForValidListAndQueue+0x64>)
 8004734:	f7fd fbfa 	bl	8001f2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004738:	4813      	ldr	r0, [pc, #76]	@ (8004788 <prvCheckForValidListAndQueue+0x68>)
 800473a:	f7fd fbf7 	bl	8001f2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800473e:	4b13      	ldr	r3, [pc, #76]	@ (800478c <prvCheckForValidListAndQueue+0x6c>)
 8004740:	4a10      	ldr	r2, [pc, #64]	@ (8004784 <prvCheckForValidListAndQueue+0x64>)
 8004742:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004744:	4b12      	ldr	r3, [pc, #72]	@ (8004790 <prvCheckForValidListAndQueue+0x70>)
 8004746:	4a10      	ldr	r2, [pc, #64]	@ (8004788 <prvCheckForValidListAndQueue+0x68>)
 8004748:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800474a:	2300      	movs	r3, #0
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <prvCheckForValidListAndQueue+0x74>)
 8004750:	4a11      	ldr	r2, [pc, #68]	@ (8004798 <prvCheckForValidListAndQueue+0x78>)
 8004752:	2110      	movs	r1, #16
 8004754:	200a      	movs	r0, #10
 8004756:	f7fd fd03 	bl	8002160 <xQueueGenericCreateStatic>
 800475a:	4603      	mov	r3, r0
 800475c:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <prvCheckForValidListAndQueue+0x60>)
 800475e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004760:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <prvCheckForValidListAndQueue+0x60>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <prvCheckForValidListAndQueue+0x60>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	490b      	ldr	r1, [pc, #44]	@ (800479c <prvCheckForValidListAndQueue+0x7c>)
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fc30 	bl	8002fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004774:	f000 f932 	bl	80049dc <vPortExitCritical>
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000da8 	.word	0x20000da8
 8004784:	20000d78 	.word	0x20000d78
 8004788:	20000d8c 	.word	0x20000d8c
 800478c:	20000da0 	.word	0x20000da0
 8004790:	20000da4 	.word	0x20000da4
 8004794:	20000e54 	.word	0x20000e54
 8004798:	20000db4 	.word	0x20000db4
 800479c:	08005178 	.word	0x08005178

080047a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b04      	subs	r3, #4
 80047b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3b04      	subs	r3, #4
 80047be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3b04      	subs	r3, #4
 80047ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047d0:	4a08      	ldr	r2, [pc, #32]	@ (80047f4 <pxPortInitialiseStack+0x54>)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b14      	subs	r3, #20
 80047da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b20      	subs	r3, #32
 80047e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	080047f9 	.word	0x080047f9

080047f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004802:	4b12      	ldr	r3, [pc, #72]	@ (800484c <prvTaskExitError+0x54>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d00b      	beq.n	8004824 <prvTaskExitError+0x2c>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	60fb      	str	r3, [r7, #12]
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <prvTaskExitError+0x28>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	60bb      	str	r3, [r7, #8]
}
 8004836:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004838:	bf00      	nop
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0fc      	beq.n	800483a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	20000010 	.word	0x20000010

08004850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <pxCurrentTCBConst2>)
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800485a:	f380 8809 	msr	PSP, r0
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	f04e 0e0d 	orr.w	lr, lr, #13
 800486e:	4770      	bx	lr

08004870 <pxCurrentTCBConst2>:
 8004870:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004878:	4806      	ldr	r0, [pc, #24]	@ (8004894 <prvPortStartFirstTask+0x1c>)
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f380 8808 	msr	MSP, r0
 8004882:	b662      	cpsie	i
 8004884:	b661      	cpsie	f
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	df00      	svc	0
 8004890:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004892:	bf00      	nop
 8004894:	e000ed08 	.word	0xe000ed08

08004898 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800489e:	4b32      	ldr	r3, [pc, #200]	@ (8004968 <xPortStartScheduler+0xd0>)
 80048a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	22ff      	movs	r2, #255	@ 0xff
 80048ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4b2a      	ldr	r3, [pc, #168]	@ (800496c <xPortStartScheduler+0xd4>)
 80048c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004970 <xPortStartScheduler+0xd8>)
 80048c8:	2207      	movs	r2, #7
 80048ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048cc:	e009      	b.n	80048e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80048ce:	4b28      	ldr	r3, [pc, #160]	@ (8004970 <xPortStartScheduler+0xd8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <xPortStartScheduler+0xd8>)
 80048d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ea:	2b80      	cmp	r3, #128	@ 0x80
 80048ec:	d0ef      	beq.n	80048ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ee:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <xPortStartScheduler+0xd8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1c3 0307 	rsb	r3, r3, #7
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d00b      	beq.n	8004912 <xPortStartScheduler+0x7a>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60bb      	str	r3, [r7, #8]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004912:	4b17      	ldr	r3, [pc, #92]	@ (8004970 <xPortStartScheduler+0xd8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	4a15      	ldr	r2, [pc, #84]	@ (8004970 <xPortStartScheduler+0xd8>)
 800491a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800491c:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <xPortStartScheduler+0xd8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004924:	4a12      	ldr	r2, [pc, #72]	@ (8004970 <xPortStartScheduler+0xd8>)
 8004926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004930:	4b10      	ldr	r3, [pc, #64]	@ (8004974 <xPortStartScheduler+0xdc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0f      	ldr	r2, [pc, #60]	@ (8004974 <xPortStartScheduler+0xdc>)
 8004936:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800493a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800493c:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <xPortStartScheduler+0xdc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0c      	ldr	r2, [pc, #48]	@ (8004974 <xPortStartScheduler+0xdc>)
 8004942:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004948:	f000 f8b8 	bl	8004abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800494c:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <xPortStartScheduler+0xe0>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004952:	f7ff ff91 	bl	8004878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004956:	f7fe ff97 	bl	8003888 <vTaskSwitchContext>
	prvTaskExitError();
 800495a:	f7ff ff4d 	bl	80047f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000e400 	.word	0xe000e400
 800496c:	20000ea4 	.word	0x20000ea4
 8004970:	20000ea8 	.word	0x20000ea8
 8004974:	e000ed20 	.word	0xe000ed20
 8004978:	20000010 	.word	0x20000010

0800497c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
}
 8004994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004996:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <vPortEnterCritical+0x58>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	4a0d      	ldr	r2, [pc, #52]	@ (80049d4 <vPortEnterCritical+0x58>)
 800499e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049a0:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <vPortEnterCritical+0x58>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d110      	bne.n	80049ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049a8:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <vPortEnterCritical+0x5c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <vPortEnterCritical+0x4e>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	603b      	str	r3, [r7, #0]
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	e7fd      	b.n	80049c6 <vPortEnterCritical+0x4a>
	}
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	20000010 	.word	0x20000010
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <vPortExitCritical+0x50>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <vPortExitCritical+0x26>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	607b      	str	r3, [r7, #4]
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <vPortExitCritical+0x50>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	4a08      	ldr	r2, [pc, #32]	@ (8004a2c <vPortExitCritical+0x50>)
 8004a0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a0c:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <vPortExitCritical+0x50>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <vPortExitCritical+0x44>
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f383 8811 	msr	BASEPRI, r3
}
 8004a1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000010 	.word	0x20000010

08004a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a30:	f3ef 8009 	mrs	r0, PSP
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <pxCurrentTCBConst>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a40:	6010      	str	r0, [r2, #0]
 8004a42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a4a:	f380 8811 	msr	BASEPRI, r0
 8004a4e:	f7fe ff1b 	bl	8003888 <vTaskSwitchContext>
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8811 	msr	BASEPRI, r0
 8004a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a66:	f380 8809 	msr	PSP, r0
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	4770      	bx	lr

08004a70 <pxCurrentTCBConst>:
 8004a70:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	607b      	str	r3, [r7, #4]
}
 8004a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a92:	f7fe fe39 	bl	8003708 <xTaskIncrementTick>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <SysTick_Handler+0x40>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f383 8811 	msr	BASEPRI, r3
}
 8004aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <vPortSetupTimerInterrupt+0x30>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <vPortSetupTimerInterrupt+0x34>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004acc:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <vPortSetupTimerInterrupt+0x38>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a09      	ldr	r2, [pc, #36]	@ (8004af8 <vPortSetupTimerInterrupt+0x3c>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	4a08      	ldr	r2, [pc, #32]	@ (8004afc <vPortSetupTimerInterrupt+0x40>)
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ade:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <vPortSetupTimerInterrupt+0x30>)
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	e000e010 	.word	0xe000e010
 8004af0:	e000e018 	.word	0xe000e018
 8004af4:	20000004 	.word	0x20000004
 8004af8:	10624dd3 	.word	0x10624dd3
 8004afc:	e000e014 	.word	0xe000e014

08004b00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b06:	f3ef 8305 	mrs	r3, IPSR
 8004b0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b0f      	cmp	r3, #15
 8004b10:	d915      	bls.n	8004b3e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b12:	4a17      	ldr	r2, [pc, #92]	@ (8004b70 <vPortValidateInterruptPriority+0x70>)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b1c:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <vPortValidateInterruptPriority+0x74>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	7afa      	ldrb	r2, [r7, #11]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d20b      	bcs.n	8004b3e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	607b      	str	r3, [r7, #4]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b78 <vPortValidateInterruptPriority+0x78>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b46:	4b0d      	ldr	r3, [pc, #52]	@ (8004b7c <vPortValidateInterruptPriority+0x7c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d90b      	bls.n	8004b66 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	603b      	str	r3, [r7, #0]
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	e7fd      	b.n	8004b62 <vPortValidateInterruptPriority+0x62>
	}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	e000e3f0 	.word	0xe000e3f0
 8004b74:	20000ea4 	.word	0x20000ea4
 8004b78:	e000ed0c 	.word	0xe000ed0c
 8004b7c:	20000ea8 	.word	0x20000ea8

08004b80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	@ 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b8c:	f7fe fd02 	bl	8003594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b90:	4b5a      	ldr	r3, [pc, #360]	@ (8004cfc <pvPortMalloc+0x17c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b98:	f000 f916 	bl	8004dc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b9c:	4b58      	ldr	r3, [pc, #352]	@ (8004d00 <pvPortMalloc+0x180>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 8090 	bne.w	8004cca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01e      	beq.n	8004bee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f023 0307 	bic.w	r3, r3, #7
 8004bc8:	3308      	adds	r3, #8
 8004bca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <pvPortMalloc+0x6e>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	617b      	str	r3, [r7, #20]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d06a      	beq.n	8004cca <pvPortMalloc+0x14a>
 8004bf4:	4b43      	ldr	r3, [pc, #268]	@ (8004d04 <pvPortMalloc+0x184>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d865      	bhi.n	8004cca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bfe:	4b42      	ldr	r3, [pc, #264]	@ (8004d08 <pvPortMalloc+0x188>)
 8004c00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c02:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <pvPortMalloc+0x188>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c08:	e004      	b.n	8004c14 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d903      	bls.n	8004c26 <pvPortMalloc+0xa6>
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f1      	bne.n	8004c0a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c26:	4b35      	ldr	r3, [pc, #212]	@ (8004cfc <pvPortMalloc+0x17c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d04c      	beq.n	8004cca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2208      	movs	r2, #8
 8004c36:	4413      	add	r3, r2
 8004c38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	1ad2      	subs	r2, r2, r3
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d920      	bls.n	8004c94 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4413      	add	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <pvPortMalloc+0xfc>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	613b      	str	r3, [r7, #16]
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	e7fd      	b.n	8004c78 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c8e:	69b8      	ldr	r0, [r7, #24]
 8004c90:	f000 f8fc 	bl	8004e8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c94:	4b1b      	ldr	r3, [pc, #108]	@ (8004d04 <pvPortMalloc+0x184>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	4a19      	ldr	r2, [pc, #100]	@ (8004d04 <pvPortMalloc+0x184>)
 8004ca0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ca2:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <pvPortMalloc+0x184>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b19      	ldr	r3, [pc, #100]	@ (8004d0c <pvPortMalloc+0x18c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d203      	bcs.n	8004cb6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cae:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <pvPortMalloc+0x184>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a16      	ldr	r2, [pc, #88]	@ (8004d0c <pvPortMalloc+0x18c>)
 8004cb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	4b11      	ldr	r3, [pc, #68]	@ (8004d00 <pvPortMalloc+0x180>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cca:	f7fe fc71 	bl	80035b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00b      	beq.n	8004cf0 <pvPortMalloc+0x170>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60fb      	str	r3, [r7, #12]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <pvPortMalloc+0x16c>
	return pvReturn;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3728      	adds	r7, #40	@ 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20001ab4 	.word	0x20001ab4
 8004d00:	20001ac0 	.word	0x20001ac0
 8004d04:	20001ab8 	.word	0x20001ab8
 8004d08:	20001aac 	.word	0x20001aac
 8004d0c:	20001abc 	.word	0x20001abc

08004d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d04a      	beq.n	8004db8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d22:	2308      	movs	r3, #8
 8004d24:	425b      	negs	r3, r3
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <vPortFree+0xb0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <vPortFree+0x46>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60fb      	str	r3, [r7, #12]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <vPortFree+0x66>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60bb      	str	r3, [r7, #8]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <vPortFree+0xb0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d019      	beq.n	8004db8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d115      	bne.n	8004db8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <vPortFree+0xb0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	401a      	ands	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d9c:	f7fe fbfa 	bl	8003594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <vPortFree+0xb4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	4a06      	ldr	r2, [pc, #24]	@ (8004dc4 <vPortFree+0xb4>)
 8004dac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f000 f86c 	bl	8004e8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004db4:	f7fe fbfc 	bl	80035b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004db8:	bf00      	nop
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20001ac0 	.word	0x20001ac0
 8004dc4:	20001ab8 	.word	0x20001ab8

08004dc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004dd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dd4:	4b27      	ldr	r3, [pc, #156]	@ (8004e74 <prvHeapInit+0xac>)
 8004dd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00c      	beq.n	8004dfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3307      	adds	r3, #7
 8004de6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e74 <prvHeapInit+0xac>)
 8004df8:	4413      	add	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e00:	4a1d      	ldr	r2, [pc, #116]	@ (8004e78 <prvHeapInit+0xb0>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e06:	4b1c      	ldr	r3, [pc, #112]	@ (8004e78 <prvHeapInit+0xb0>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e14:	2208      	movs	r2, #8
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0307 	bic.w	r3, r3, #7
 8004e22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <prvHeapInit+0xb4>)
 8004e28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e2a:	4b14      	ldr	r3, [pc, #80]	@ (8004e7c <prvHeapInit+0xb4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e32:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <prvHeapInit+0xb4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	1ad2      	subs	r2, r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e48:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <prvHeapInit+0xb4>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4a0a      	ldr	r2, [pc, #40]	@ (8004e80 <prvHeapInit+0xb8>)
 8004e56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4a09      	ldr	r2, [pc, #36]	@ (8004e84 <prvHeapInit+0xbc>)
 8004e5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e60:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <prvHeapInit+0xc0>)
 8004e62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e66:	601a      	str	r2, [r3, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000eac 	.word	0x20000eac
 8004e78:	20001aac 	.word	0x20001aac
 8004e7c:	20001ab4 	.word	0x20001ab4
 8004e80:	20001abc 	.word	0x20001abc
 8004e84:	20001ab8 	.word	0x20001ab8
 8004e88:	20001ac0 	.word	0x20001ac0

08004e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e94:	4b27      	ldr	r3, [pc, #156]	@ (8004f34 <prvInsertBlockIntoFreeList+0xa8>)
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e002      	b.n	8004ea0 <prvInsertBlockIntoFreeList+0x14>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d8f7      	bhi.n	8004e9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d108      	bne.n	8004ece <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	441a      	add	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	441a      	add	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d118      	bne.n	8004f14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <prvInsertBlockIntoFreeList+0xac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d00d      	beq.n	8004f0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e008      	b.n	8004f1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <prvInsertBlockIntoFreeList+0xac>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e003      	b.n	8004f1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d002      	beq.n	8004f2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	20001aac 	.word	0x20001aac
 8004f38:	20001ab4 	.word	0x20001ab4

08004f3c <memset>:
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	4402      	add	r2, r0
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <_reclaim_reent>:
 8004f4c:	4b29      	ldr	r3, [pc, #164]	@ (8004ff4 <_reclaim_reent+0xa8>)
 8004f4e:	b570      	push	{r4, r5, r6, lr}
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4604      	mov	r4, r0
 8004f54:	4283      	cmp	r3, r0
 8004f56:	d04b      	beq.n	8004ff0 <_reclaim_reent+0xa4>
 8004f58:	69c3      	ldr	r3, [r0, #28]
 8004f5a:	b1ab      	cbz	r3, 8004f88 <_reclaim_reent+0x3c>
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	b16b      	cbz	r3, 8004f7c <_reclaim_reent+0x30>
 8004f60:	2500      	movs	r5, #0
 8004f62:	69e3      	ldr	r3, [r4, #28]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	5959      	ldr	r1, [r3, r5]
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	d13b      	bne.n	8004fe4 <_reclaim_reent+0x98>
 8004f6c:	3504      	adds	r5, #4
 8004f6e:	2d80      	cmp	r5, #128	@ 0x80
 8004f70:	d1f7      	bne.n	8004f62 <_reclaim_reent+0x16>
 8004f72:	69e3      	ldr	r3, [r4, #28]
 8004f74:	4620      	mov	r0, r4
 8004f76:	68d9      	ldr	r1, [r3, #12]
 8004f78:	f000 f872 	bl	8005060 <_free_r>
 8004f7c:	69e3      	ldr	r3, [r4, #28]
 8004f7e:	6819      	ldr	r1, [r3, #0]
 8004f80:	b111      	cbz	r1, 8004f88 <_reclaim_reent+0x3c>
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 f86c 	bl	8005060 <_free_r>
 8004f88:	6961      	ldr	r1, [r4, #20]
 8004f8a:	b111      	cbz	r1, 8004f92 <_reclaim_reent+0x46>
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f000 f867 	bl	8005060 <_free_r>
 8004f92:	69e1      	ldr	r1, [r4, #28]
 8004f94:	b111      	cbz	r1, 8004f9c <_reclaim_reent+0x50>
 8004f96:	4620      	mov	r0, r4
 8004f98:	f000 f862 	bl	8005060 <_free_r>
 8004f9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f9e:	b111      	cbz	r1, 8004fa6 <_reclaim_reent+0x5a>
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 f85d 	bl	8005060 <_free_r>
 8004fa6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fa8:	b111      	cbz	r1, 8004fb0 <_reclaim_reent+0x64>
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 f858 	bl	8005060 <_free_r>
 8004fb0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004fb2:	b111      	cbz	r1, 8004fba <_reclaim_reent+0x6e>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 f853 	bl	8005060 <_free_r>
 8004fba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004fbc:	b111      	cbz	r1, 8004fc4 <_reclaim_reent+0x78>
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 f84e 	bl	8005060 <_free_r>
 8004fc4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004fc6:	b111      	cbz	r1, 8004fce <_reclaim_reent+0x82>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 f849 	bl	8005060 <_free_r>
 8004fce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004fd0:	b111      	cbz	r1, 8004fd8 <_reclaim_reent+0x8c>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 f844 	bl	8005060 <_free_r>
 8004fd8:	6a23      	ldr	r3, [r4, #32]
 8004fda:	b14b      	cbz	r3, 8004ff0 <_reclaim_reent+0xa4>
 8004fdc:	4620      	mov	r0, r4
 8004fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fe2:	4718      	bx	r3
 8004fe4:	680e      	ldr	r6, [r1, #0]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f83a 	bl	8005060 <_free_r>
 8004fec:	4631      	mov	r1, r6
 8004fee:	e7bb      	b.n	8004f68 <_reclaim_reent+0x1c>
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000014 	.word	0x20000014

08004ff8 <__libc_init_array>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	4d0c      	ldr	r5, [pc, #48]	@ (8005030 <__libc_init_array+0x38>)
 8004ffe:	4c0d      	ldr	r4, [pc, #52]	@ (8005034 <__libc_init_array+0x3c>)
 8005000:	1b64      	subs	r4, r4, r5
 8005002:	10a4      	asrs	r4, r4, #2
 8005004:	42a6      	cmp	r6, r4
 8005006:	d109      	bne.n	800501c <__libc_init_array+0x24>
 8005008:	f000 f87e 	bl	8005108 <_init>
 800500c:	2600      	movs	r6, #0
 800500e:	4d0a      	ldr	r5, [pc, #40]	@ (8005038 <__libc_init_array+0x40>)
 8005010:	4c0a      	ldr	r4, [pc, #40]	@ (800503c <__libc_init_array+0x44>)
 8005012:	1b64      	subs	r4, r4, r5
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	42a6      	cmp	r6, r4
 8005018:	d105      	bne.n	8005026 <__libc_init_array+0x2e>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005020:	4798      	blx	r3
 8005022:	3601      	adds	r6, #1
 8005024:	e7ee      	b.n	8005004 <__libc_init_array+0xc>
 8005026:	f855 3b04 	ldr.w	r3, [r5], #4
 800502a:	4798      	blx	r3
 800502c:	3601      	adds	r6, #1
 800502e:	e7f2      	b.n	8005016 <__libc_init_array+0x1e>
 8005030:	0800524c 	.word	0x0800524c
 8005034:	0800524c 	.word	0x0800524c
 8005038:	0800524c 	.word	0x0800524c
 800503c:	08005250 	.word	0x08005250

08005040 <__retarget_lock_acquire_recursive>:
 8005040:	4770      	bx	lr

08005042 <__retarget_lock_release_recursive>:
 8005042:	4770      	bx	lr

08005044 <memcpy>:
 8005044:	440a      	add	r2, r1
 8005046:	4291      	cmp	r1, r2
 8005048:	f100 33ff 	add.w	r3, r0, #4294967295
 800504c:	d100      	bne.n	8005050 <memcpy+0xc>
 800504e:	4770      	bx	lr
 8005050:	b510      	push	{r4, lr}
 8005052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005056:	4291      	cmp	r1, r2
 8005058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505c:	d1f9      	bne.n	8005052 <memcpy+0xe>
 800505e:	bd10      	pop	{r4, pc}

08005060 <_free_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	2900      	cmp	r1, #0
 8005066:	d040      	beq.n	80050ea <_free_r+0x8a>
 8005068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506c:	1f0c      	subs	r4, r1, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	bfb8      	it	lt
 8005072:	18e4      	addlt	r4, r4, r3
 8005074:	f000 f83c 	bl	80050f0 <__malloc_lock>
 8005078:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <_free_r+0x8c>)
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	b933      	cbnz	r3, 800508c <_free_r+0x2c>
 800507e:	6063      	str	r3, [r4, #4]
 8005080:	6014      	str	r4, [r2, #0]
 8005082:	4628      	mov	r0, r5
 8005084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005088:	f000 b838 	b.w	80050fc <__malloc_unlock>
 800508c:	42a3      	cmp	r3, r4
 800508e:	d908      	bls.n	80050a2 <_free_r+0x42>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	1821      	adds	r1, r4, r0
 8005094:	428b      	cmp	r3, r1
 8005096:	bf01      	itttt	eq
 8005098:	6819      	ldreq	r1, [r3, #0]
 800509a:	685b      	ldreq	r3, [r3, #4]
 800509c:	1809      	addeq	r1, r1, r0
 800509e:	6021      	streq	r1, [r4, #0]
 80050a0:	e7ed      	b.n	800507e <_free_r+0x1e>
 80050a2:	461a      	mov	r2, r3
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	b10b      	cbz	r3, 80050ac <_free_r+0x4c>
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	d9fa      	bls.n	80050a2 <_free_r+0x42>
 80050ac:	6811      	ldr	r1, [r2, #0]
 80050ae:	1850      	adds	r0, r2, r1
 80050b0:	42a0      	cmp	r0, r4
 80050b2:	d10b      	bne.n	80050cc <_free_r+0x6c>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	4401      	add	r1, r0
 80050b8:	1850      	adds	r0, r2, r1
 80050ba:	4283      	cmp	r3, r0
 80050bc:	6011      	str	r1, [r2, #0]
 80050be:	d1e0      	bne.n	8005082 <_free_r+0x22>
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4408      	add	r0, r1
 80050c6:	6010      	str	r0, [r2, #0]
 80050c8:	6053      	str	r3, [r2, #4]
 80050ca:	e7da      	b.n	8005082 <_free_r+0x22>
 80050cc:	d902      	bls.n	80050d4 <_free_r+0x74>
 80050ce:	230c      	movs	r3, #12
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	e7d6      	b.n	8005082 <_free_r+0x22>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	1821      	adds	r1, r4, r0
 80050d8:	428b      	cmp	r3, r1
 80050da:	bf01      	itttt	eq
 80050dc:	6819      	ldreq	r1, [r3, #0]
 80050de:	685b      	ldreq	r3, [r3, #4]
 80050e0:	1809      	addeq	r1, r1, r0
 80050e2:	6021      	streq	r1, [r4, #0]
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	6054      	str	r4, [r2, #4]
 80050e8:	e7cb      	b.n	8005082 <_free_r+0x22>
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20001c00 	.word	0x20001c00

080050f0 <__malloc_lock>:
 80050f0:	4801      	ldr	r0, [pc, #4]	@ (80050f8 <__malloc_lock+0x8>)
 80050f2:	f7ff bfa5 	b.w	8005040 <__retarget_lock_acquire_recursive>
 80050f6:	bf00      	nop
 80050f8:	20001bfc 	.word	0x20001bfc

080050fc <__malloc_unlock>:
 80050fc:	4801      	ldr	r0, [pc, #4]	@ (8005104 <__malloc_unlock+0x8>)
 80050fe:	f7ff bfa0 	b.w	8005042 <__retarget_lock_release_recursive>
 8005102:	bf00      	nop
 8005104:	20001bfc 	.word	0x20001bfc

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
